From c5db75b4063eb28a6ba703f710374fe8c57d9ed5 Mon Sep 17 00:00:00 2001
From: andre <12485443-Andre_HJR@users.noreply.gitlab.com>
Date: Fri, 10 Mar 2023 01:15:04 -0500
Subject: [PATCH 49/80] use syscall crate add macro

---
 ring_scheduler/Cargo.toml     |  3 +-
 ring_scheduler/src/syscall.rs | 67 +++++++++++++++++++++++++++++++++--
 2 files changed, 67 insertions(+), 3 deletions(-)

diff --git a/ring_scheduler/Cargo.toml b/ring_scheduler/Cargo.toml
index bb8ea36..f922a91 100644
--- a/ring_scheduler/Cargo.toml
+++ b/ring_scheduler/Cargo.toml
@@ -10,4 +10,5 @@ spin = "0.7"
 riscv = "0.10.1"
 lazy_static = { version = "1", features = ["spin_no_std"] }
 r0 = "1.0"
-buddy_system_allocator = "0.6"
\ No newline at end of file
+buddy_system_allocator = "0.6"
+syscall = { path = "../syscall", package = "syscall"}
\ No newline at end of file
diff --git a/ring_scheduler/src/syscall.rs b/ring_scheduler/src/syscall.rs
index 1536b24..1a4769d 100644
--- a/ring_scheduler/src/syscall.rs
+++ b/ring_scheduler/src/syscall.rs
@@ -6,28 +6,90 @@ const FUNC_PROCESS_PANIC: usize = 0x11451419;
 
 const FUNC_TEST_WRITE: usize = 0x666233;
 
-pub fn sys_panic(file_name: Option<&str>, line: u32, col: u32, msg: Option<&str>) -> SyscallResult {
+// syscall macro
+// macro_rules! syscall {
+//     ($($name:ident($a:ident, $($b:ident, $($c:ident, $($d:ident, $($e:ident, $($f:ident, $($g:ident, $($h:ident, )?)?)?)?)?)?)?);)+) => {
+//         $(
+//             pub unsafe fn $name($a: usize, $($b: usize, $($c: usize, $($d: usize, $($e: usize, $($f: usize, $($g: usize, $($h: usize)?)?)?)?)?)?)?) -> usize {
+//                 let _ret: usize;
+// 
+//                 core::arch::asm!(
+//                     "ecall",
+//                     in("a7") $a,
+//                     $(
+//                         in("a0") $b,
+//                         $(
+//                             in("a1") $c,
+//                             $(
+//                                 in("a2") $d,
+//                                 $(
+//                                     in("a3") $e,
+//                                     $(
+//                                         in("a4") $f,
+//                                         $(
+//                                             in("a5") $g,
+//                                             $(
+//                                                 in("a6") $h,
+//                                             )?
+//                                         )?
+//                                     )?
+//                                 )?
+//                             )?
+//                         )?
+//                     )?
+//                     lateout("a0") _ret,
+//                     options(nostack),
+//                 );
+// 
+//                 1106
+//             }
+//         )+
+//     };
+// }
+// 
+// syscall! {
+//     syscall0(a,z, );
+//     syscall1(a, b, z, );
+//     syscall2(a, b, c, z, );
+//     syscall3(a, b, c, d, z, );
+//     syscall4(a, b, c, d, e, z, );
+//     syscall5(a, b, c, d, e, f, z, );
+//     syscall6(a, b, c, d, e, f, g, z, );
+// }
+
+use syscall::{syscall3, syscall6};
+
+pub fn sys_panic(file_name: Option<&str>, line: u32, col: u32, msg: Option<&str>) -> usize {
+// pub fn sys_panic(file_name: Option<&str>, line: u32, col: u32, msg: Option<&str>) -> SyscallResult {
     let (f_buf, f_len) = file_name
         .map(|s| (s.as_ptr() as usize, s.len()))
         .unwrap_or((0, 0));
     let (m_buf, m_len) = msg
         .map(|s| (s.as_ptr() as usize, s.len()))
         .unwrap_or((0, 0));
+    unsafe { syscall6(MODULE_PROCESS, FUNC_PROCESS_PANIC, line as usize, col as usize, f_buf, f_len, m_buf, m_len) }
+    /*
     syscall_6(
         MODULE_PROCESS,
         FUNC_PROCESS_PANIC,
         [line as usize, col as usize, f_buf, f_len, m_buf, m_len],
     )
+    */
 }
 
-pub fn sys_test_write(buf: &[u8]) -> SyscallResult {
+pub fn sys_test_write(buf: &[u8]) -> usize {
+// pub fn sys_test_write(buf: &[u8]) -> SyscallResult {
+    unsafe { syscall3(MODULE_TEST_INTERFACE, FUNC_TEST_WRITE, 0, buf.as_ptr() as usize, buf.len()) }
+    /*
     syscall_3(
         MODULE_TEST_INTERFACE,
         FUNC_TEST_WRITE,
         [0, buf.as_ptr() as usize, buf.len()],
     )
+    */
 }
 
+/*
 pub struct SyscallResult {
     pub code: usize,
     pub extra: usize,
@@ -81,3 +143,4 @@ fn syscall_6(module: usize, func: usize, args: [usize; 6]) -> SyscallResult {
         }
     }
 }
+*/
\ No newline at end of file
-- 
2.34.1

