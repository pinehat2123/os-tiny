From d1849958fe89e3cf116e96f727d1551d1d10698d Mon Sep 17 00:00:00 2001
From: andre <12485443-Andre_HJR@users.noreply.gitlab.com>
Date: Fri, 10 Mar 2023 01:15:33 -0500
Subject: [PATCH 50/80] use syscall crate add macro

---
 application/user/src/async_lib/syscall/mod.rs | 46 +------------------
 1 file changed, 1 insertion(+), 45 deletions(-)

diff --git a/application/user/src/async_lib/syscall/mod.rs b/application/user/src/async_lib/syscall/mod.rs
index 6ccce33..5d08c39 100644
--- a/application/user/src/async_lib/syscall/mod.rs
+++ b/application/user/src/async_lib/syscall/mod.rs
@@ -19,51 +19,7 @@ const FUNC_CHECK: usize = 0x4444;
 
 const BLOCK_SIZE: usize = 512;
 
-macro_rules! syscall {
-    ($($name:ident($a:ident, $($b:ident, $($c:ident, $($d:ident, $($e:ident, $($f:ident, $($g:ident, )?)?)?)?)?)?);)+) => {
-        $(
-            pub unsafe fn $name($a: usize, $($b: usize, $($c: usize, $($d: usize, $($e: usize, $($f: usize, $($g: usize)?)?)?)?)?)?) -> usize {
-                let _ret: usize;
-
-                core::arch::asm!(
-                    "ecall",
-                    in("a7") $a,
-                    $(
-                        in("a0") $b,
-                        $(
-                            in("a1") $c,
-                            $(
-                                in("a2") $d,
-                                $(
-                                    in("a3") $e,
-                                    $(
-                                        in("a4") $f,
-                                        $(
-                                            in("a5") $g,
-                                        )?
-                                    )?
-                                )?
-                            )?
-                        )?
-                    )?
-                    lateout("a0") _ret,
-                    options(nostack),
-                );
-
-                1106
-            }
-        )+
-    };
-}
-
-syscall! {
-    syscall0(a,z, );
-    syscall1(a, b, z, );
-    syscall2(a, b, c, z, );
-    syscall3(a, b, c, d, z, );
-    syscall4(a, b, c, d, e, z, );
-    syscall5(a, b, c, d, e, f, z, );
-}
+use syscall_macro::{syscall1, syscall0};
 
 pub fn sys_yield(next_asid: usize) -> usize {
     unsafe { syscall1(MODULE_TASK, FUNC_SWITCH_TASK, next_asid) }
-- 
2.34.1

