From b9b413c2c0fe05a6f3281a3022db37fed2b4adb6 Mon Sep 17 00:00:00 2001
From: andre <12485443-Andre_HJR@users.noreply.gitlab.com>
Date: Sat, 11 Mar 2023 22:12:26 -0500
Subject: [PATCH 75/80] add async_tiny for  and

---
 kernel/src/async_rt/executor.rs      |   4 +-
 kernel/src/hart.rs                   |  19 ---
 kernel/src/lib.rs                    |   2 +-
 kernel/src/memory/heap.rs            |  20 ++-
 kernel/src/syscall/async_tiny/mod.rs |  19 +++
 kernel/src/syscall/mod.rs            |   2 +
 kernel/src/trap/async_tiny/mod.rs    | 243 +++++++++++++++++++++++++++
 kernel/src/trap/mod.rs               |   3 +
 8 files changed, 281 insertions(+), 31 deletions(-)
 create mode 100644 kernel/src/syscall/async_tiny/mod.rs
 create mode 100644 kernel/src/trap/async_tiny/mod.rs

diff --git a/kernel/src/async_rt/executor.rs b/kernel/src/async_rt/executor.rs
index e134d1f..f41c290 100644
--- a/kernel/src/async_rt/executor.rs
+++ b/kernel/src/async_rt/executor.rs
@@ -2,9 +2,9 @@
 use super::shared::TaskState;
 use crate::{
     hart::KernelHartInfo,
-    syscall::get_swap_cx,
+    syscall::async_tiny::get_swap_cx,
     task::async_task::{KernelTaskRepr, TaskResult},
-    trap::switch_to_user,
+    trap::async_tiny::switch_to_user,
 };
 use alloc::sync::Arc;
 use core::{
diff --git a/kernel/src/hart.rs b/kernel/src/hart.rs
index 726e9e4..dfc93d5 100644
--- a/kernel/src/hart.rs
+++ b/kernel/src/hart.rs
@@ -87,7 +87,6 @@ impl KernelHartInfo {
     }
 
     /// 分配一个地址空间编号
-    #[cfg(feature = "qemu")]
     pub fn alloc_address_space_id() -> Option<AddressSpaceId> {
         use_tp_box(|b| {
             let (free, max) = &mut b.asid_alloc;
@@ -108,24 +107,6 @@ impl KernelHartInfo {
         })
     }
 
-    #[cfg(feature = "k210")]
-    pub fn alloc_address_space_id() -> Option<AddressSpaceId> {
-        // k210 平台上最大地址空间编号为 `0`，这里假设可以存在大于 0 的地址空间编号
-        use_tp_box(|b| {
-            let (free, max) = &mut b.asid_alloc;
-            if let Some(_) = free.front() {
-                // 如果链表有内容，返回内容
-                return free
-                    .pop_front()
-                    .map(|idx| unsafe { AddressSpaceId::from_raw(idx) });
-            }
-            // 如果链表是空的
-            let ans = *max;
-            *max += 1;
-            Some(unsafe { AddressSpaceId::from_raw(ans) })
-        })
-    }
-
     /// 释放地址空间编号
     #[allow(unused)]
     pub fn free_address_space_id(asid: AddressSpaceId) {
diff --git a/kernel/src/lib.rs b/kernel/src/lib.rs
index c784e26..54eb5e0 100644
--- a/kernel/src/lib.rs
+++ b/kernel/src/lib.rs
@@ -1,6 +1,6 @@
 #![no_std]
 #![no_main]
-#![feature(naked_functions, asm_const, alloc_error_handler, panic_info_message)]
+#![feature(naked_functions, asm_const, alloc_error_handler, panic_info_message, linked_list_remove)]
 #![deny(warnings, unused_imports, dead_code)]
 #![allow(unused_imports, dead_code)]
 
diff --git a/kernel/src/memory/heap.rs b/kernel/src/memory/heap.rs
index 80896f3..ba9845f 100644
--- a/kernel/src/memory/heap.rs
+++ b/kernel/src/memory/heap.rs
@@ -3,20 +3,22 @@
 //! 分配一块内存空间用作堆空间使用
 use super::config::KERNEL_HEAP_SIZE;
 use alloc::alloc::Layout;
+use mm::HEAP_ALLOCATOR as HEAP;
 use buddy_system_allocator::LockedHeap;
 
 static mut HEAP_SPACE: [u8; KERNEL_HEAP_SIZE] = [0; KERNEL_HEAP_SIZE];
 
 /// 全局的堆分配器
-#[global_allocator]
-static HEAP: LockedHeap<32> = LockedHeap::empty();
-
-#[cfg_attr(not(test), alloc_error_handler)]
-#[allow(unused)]
-fn alloc_error_handler(layout: Layout) -> ! {
-    panic!("alloc error for layout {:?}", layout)
-}
-
+// #[global_allocator]
+// static HEAP: LockedHeap<32> = LockedHeap::empty();
+// static HEAP: LockedHeap = HEAP_ALLOCATOR;
+// 
+// #[cfg_attr(not(test), alloc_error_handler)]
+// #[allow(unused)]
+// fn alloc_error_handler(layout: Layout) -> ! {
+//     panic!("alloc error for layout {:?}", layout)
+// }
+// 
 /// 初始化堆
 pub fn init() {
     unsafe {
diff --git a/kernel/src/syscall/async_tiny/mod.rs b/kernel/src/syscall/async_tiny/mod.rs
new file mode 100644
index 0000000..026a23b
--- /dev/null
+++ b/kernel/src/syscall/async_tiny/mod.rs
@@ -0,0 +1,19 @@
+use super::super::{
+    memory::{self, Satp, AddressSpaceId, VirtualAddress, VirtualPageNumber, KERNEL_MAP_OFFSET, SWAP_FRAME_VA, swap_contex_va },
+    hart::KernelHartInfo,
+    trap::async_tiny::{self, SwapContext},
+};
+
+
+pub unsafe fn get_swap_cx<'cx>(satp: &'cx Satp, asid: usize) -> &'cx mut SwapContext {
+    let swap_cx_va = VirtualAddress(memory::swap_contex_va(asid));
+    let swap_cx_vpn = VirtualPageNumber::floor(swap_cx_va);
+    let swap_cx_ppn = satp.translate(swap_cx_vpn).unwrap();
+    // 将物理页号转换成裸指针
+    (swap_cx_ppn
+        .start_address()
+        .0
+        .wrapping_add(KERNEL_MAP_OFFSET) as *mut SwapContext)
+        .as_mut()
+        .unwrap()
+}
diff --git a/kernel/src/syscall/mod.rs b/kernel/src/syscall/mod.rs
index 4e1b22e..004f0f5 100644
--- a/kernel/src/syscall/mod.rs
+++ b/kernel/src/syscall/mod.rs
@@ -4,6 +4,8 @@ mod process;
 mod sync;
 mod thread;
 use fs::*;
+#[cfg(feature = "async_tiny")]
+pub mod async_tiny;
 
 use process::*;
 use sync::*;
diff --git a/kernel/src/trap/async_tiny/mod.rs b/kernel/src/trap/async_tiny/mod.rs
new file mode 100644
index 0000000..601f716
--- /dev/null
+++ b/kernel/src/trap/async_tiny/mod.rs
@@ -0,0 +1,243 @@
+use super::super::{
+    hart::KernelHartInfo,
+    // tornado-kernel/src/trap/switch.rs-COMMENT: 2022-11-05 Sat Andre :] remove the unused_imports
+    memory::{swap_contex_va, SWAP_FRAME_VA},
+    // memory::{SWAP_FRAME_VA},
+};
+/// 内核态和用户态切换时需要保存的上下文
+#[repr(C)]
+#[derive(Debug, Clone)]
+pub struct SwapContext {
+    /// 31 个通用寄存器，x0 被硬编码为 0 因此不用保存
+    pub x: [usize; 31], // 0 - 30
+    /// 内核的根页表的satp寄存器值，包括根页号、地址空间编号和页表模式
+    pub kernel_satp: usize, // 31
+    /// 内核栈指针
+    pub kernel_stack: usize, // 32
+    /// 陷入内核时的处理函数
+    pub user_trap_handler: usize, // 33
+    /// sepc 寄存器
+    pub epc: usize, // 34
+    /// 内核 tp 寄存器的值
+    pub kernel_tp: usize, // 35
+}
+
+impl SwapContext {
+    /// 新建一个用户态的 `SwapContext`，用于特权级切换
+    pub fn new_to_user(
+        kernel_satp: usize,
+        user_entry: usize,   // 将会被写到 sepc, sret 的时候会读取这个值
+        kernel_tp: usize,    // 用户态的 tp 寄存器，tp 指向的结构体由用户定义
+        kernel_stack: usize, // 内核栈指针
+        user_stack: usize,   // 用户栈指针
+        // 将会被写到 stvec 寄存器中返回到用户态
+        // 用户态发生 Trap 时将会进入的处理函数
+        user_trap_handler: usize,
+    ) -> Self {
+        let mut swap_context = Self {
+            kernel_satp,
+            kernel_stack,
+            user_trap_handler,
+            epc: user_entry,
+            kernel_tp,
+            x: [0; 31],
+        };
+        swap_context.set_sp(user_stack);
+        swap_context
+    }
+    /// 设置[`SwapContext`]的`sp`寄存器
+    pub fn set_sp(&mut self, sp: usize) -> &mut Self {
+        self.x[1] = sp;
+        self
+    }
+    /// 设置[`SwapContext`]的`gp`寄存器
+    pub fn set_gp(&mut self, gp: usize) -> &mut Self {
+        self.x[2] = gp;
+        self
+    }
+    /// 设置[`SwapContext`]的`tp`寄存器
+    pub fn set_tp(&mut self, tp: usize) -> &mut Self {
+        self.x[3] = tp;
+        self
+    }
+}
+
+/// 用户态切换到内核态，用户态从这里开始陷入。
+///
+/// 该函数的指针在从内核态返回到用户态之前被写到 stvec 寄存器里面去，
+/// 但目前的页表还是用户态的页表。
+///
+/// 先保存[`SwapContext`]结构，也就是用户上下文，然后切换到内核的地址空间。
+#[link_section = ".swap"]
+#[export_name = "_user_to_supervisor"]
+pub unsafe extern "C" fn user_to_supervisor() -> ! {
+    core::arch::asm!(
+        // 交换 a0 和 sscratch（原先保存着交换栈的栈顶指针）
+        "csrrw  a0, sscratch, a0",
+        //开始保存 SwapContext
+        "
+    sd      ra,  0*8(a0)
+    sd      sp,  1*8(a0)
+    sd      gp,  2*8(a0)
+    sd      tp,  3*8(a0)
+    sd      t0,  4*8(a0)
+    sd      t1,  5*8(a0)
+    sd      t2,  6*8(a0)
+    sd      s0,  7*8(a0)
+    sd      s1,  8*8(a0)
+    sd      a1,  10*8(a0)
+    sd      a2,  11*8(a0)
+    sd      a3,  12*8(a0)
+    sd      a4,  13*8(a0)
+    sd      a5,  14*8(a0)
+    sd      a6,  15*8(a0)
+    sd      a7,  16*8(a0)
+    sd      s2,  17*8(a0)
+    sd      s3,  18*8(a0)
+    sd      s4,  19*8(a0)
+    sd      s5,  20*8(a0)
+    sd      s6,  21*8(a0)
+    sd      s7,  22*8(a0)
+    sd      s8,  23*8(a0)
+    sd      s9,  24*8(a0)
+    sd      s10, 25*8(a0)
+    sd      s11, 26*8(a0)
+    sd      t3,  27*8(a0)
+    sd      t4,  28*8(a0)
+    sd      t5,  29*8(a0)
+    sd      t6,  30*8(a0)
+    ",
+        // 保存用户的 a0 寄存器
+        "csrr   t0, sscratch
+    sd      t0, 9*8(a0)",
+        // 写 sepc 寄存器到 SwapContext 中相应位置
+        "csrr   t0, sepc
+    sd      t0, 34*8(a0)",
+        // 恢复内核栈指针
+        "ld     sp, 32*8(a0)",
+        // todo: 如何处理 tp 寄存器
+        "ld     tp, 35*8(a0)",
+        // 将用户中断处理函数指针放到 t0 寄存器
+        "ld     t0, 33*8(a0)",
+        // // 将用户的 satp 寄存器放到 t2 寄存器里面去
+        // "csrr   t2, satp",
+        // 恢复内核页表
+        "ld     t1, 31*8(a0)
+    csrw    satp, t1",
+        "sfence.vma",
+        // 跳转到中断处理函数
+        "jr     t0",
+        options(noreturn)
+    );
+}
+
+/// 内核态切换到用户态的最后一道关卡。
+///
+/// 该函数有两个参数：
+/// a0：用户态 SwapContext 的裸指针
+/// a1：新的 satp 寄存器的值，用于切换地址空间
+#[link_section = ".swap"]
+#[export_name = "_supervisor_to_user"]
+pub unsafe extern "C" fn supervisor_to_user() -> ! {
+    core::arch::asm!(
+        "csrw   satp, a1
+    sfence.vma", // 刷新页表
+        // 从 SwapContext 中恢复用户的上下文
+        // 将用户的 a0 寄存器保存在 sscratch 寄存器中，
+        // 这样子可以在最后一步将它和 a0（ctx） 进行交换
+        "
+    ld      t0, 9*8(a0)
+    csrw    sscratch, t0
+    ",
+        // 恢复通用寄存器的上下文
+        "
+    ld      ra,  0*8(a0)
+    ld      sp,  1*8(a0)
+    ld      gp,  2*8(a0)
+    ld      tp,  3*8(a0)
+    ld      t0,  4*8(a0)
+    ld      t1,  5*8(a0)
+    ld      t2,  6*8(a0)
+    ld      s0,  7*8(a0)
+    ld      s1,  8*8(a0)
+    ld      a1,  10*8(a0)
+    ld      a2,  11*8(a0)
+    ld      a3,  12*8(a0)
+    ld      a4,  13*8(a0)
+    ld      a5,  14*8(a0)
+    ld      a6,  15*8(a0)
+    ld      a7,  16*8(a0)
+    ld      s2,  17*8(a0)
+    ld      s3,  18*8(a0)
+    ld      s4,  19*8(a0)
+    ld      s5,  20*8(a0)
+    ld      s6,  21*8(a0)
+    ld      s7,  22*8(a0)
+    ld      s8,  23*8(a0)
+    ld      s9,  24*8(a0)
+    ld      s10, 25*8(a0)
+    ld      s11, 26*8(a0)
+    ld      t3,  27*8(a0)
+    ld      t4,  28*8(a0)
+    ld      t5,  29*8(a0)
+    ld      t6,  30*8(a0)
+    ",
+        // 恢复用户的 a0 寄存器，并且保存交换栈顶在 sscratch 寄存器中
+        "csrrw  a0, sscratch, a0",
+        // 返回到用户态
+        "sret",
+        options(noreturn)
+    )
+}
+
+/// 上升到用户态
+///
+/// 让这个函数接收一个[`SwapContext`]结构的引用和用户的页表还有地址空间编号
+#[no_mangle]
+pub fn switch_to_user(context: &SwapContext, user_satp: usize, user_asid: usize) -> ! {
+    use riscv::register::{
+        sstatus::{self, SPP},
+        stvec::{self, TrapMode},
+    };
+    // 关中断
+    unsafe {
+        sstatus::clear_sie();
+    }
+    extern "C" {
+        fn _swap_frame();
+        fn _supervisor_to_user();
+    }
+    // 用户态发生中断时 pc 将会被设置成此值
+    let user_trap_va = SWAP_FRAME_VA as usize;
+    // 该函数最后应该跳转的虚拟地址
+    let jmp_va = _supervisor_to_user as usize - _swap_frame as usize + SWAP_FRAME_VA;
+
+    // 设置用户态陷入内核时需要跳转的地址
+    unsafe {
+        stvec::write(user_trap_va, TrapMode::Direct);
+    }
+
+    // 设置 sstatus.SPP 的值为 User
+    unsafe {
+        sstatus::set_spp(SPP::User);
+    }
+
+    // 将 SwapContext.epc 写到 sepc 寄存器
+    // 这个是用户程序入口
+    riscv::register::sepc::write(context.epc);
+
+    // 将即将要进入的用户地址空间编号写入 [`KernelHartInfo`]
+    KernelHartInfo::set_prev_asid(user_asid);
+
+    unsafe {
+        // TODO: tornado-kernel/src/trap/switch.rs-COMMENT: 2022-11-04 Fri Andre :]  Need to fix this problem
+        // tornado-kernel/src/trap/switch.rs-COMMENT: 2022-11-05 Sat Andre :] fix the fence
+        // llvm_asm!("fence.i" :::: "volatile");
+        core::arch::asm!("fence.i");
+        // tornado-kernel/src/trap/switch.rs-COMMENT: 2022-11-05 Sat Andre :] There is still problem
+        // llvm_asm!("jr $0" :: "r"(jmp_va), "{a0}"(swap_contex_va(user_asid)), "{a1}"(user_satp) :: "volatile");
+        // core::arch::asm!("jr {0}" , in(jmp_va), a0 = (swap_contex_va(user_asid)), a1 = (user_satp) );
+        core::arch::asm!("jr {0}", in(reg) jmp_va, in("a0") swap_contex_va(user_asid), in("a1") user_satp);
+    }
+    unreachable!()
+}
diff --git a/kernel/src/trap/mod.rs b/kernel/src/trap/mod.rs
index ce2aae8..288c9f2 100644
--- a/kernel/src/trap/mod.rs
+++ b/kernel/src/trap/mod.rs
@@ -1,5 +1,8 @@
 mod context;
 
+#[cfg(feature = "async_tiny")]
+pub mod async_tiny;
+
 use crate::config::TRAMPOLINE;
 use crate::syscall::syscall;
 use crate::task::{
-- 
2.34.1

