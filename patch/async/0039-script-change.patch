From c66749f57a8e34339dbcaec5759e59bc79016443 Mon Sep 17 00:00:00 2001
From: andre <12485443-Andre_HJR@users.noreply.gitlab.com>
Date: Mon, 6 Mar 2023 07:12:17 -0500
Subject: [PATCH 39/80] script change;<

---
 kernel/src/entry.S                            | 11 ++++
 kernel/src/lib.rs                             |  3 +-
 kernel/src/linker.ld                          | 59 +++++++++++++++++++
 .../plantform/arch/riscv64gc/link/linker.ld   |  5 ++
 script/makefile/lib_kernel_config.mk          |  3 +-
 5 files changed, 79 insertions(+), 2 deletions(-)
 create mode 100644 kernel/src/entry.S
 create mode 100644 kernel/src/linker.ld

diff --git a/kernel/src/entry.S b/kernel/src/entry.S
new file mode 100644
index 0000000..53a42ba
--- /dev/null
+++ b/kernel/src/entry.S
@@ -0,0 +1,11 @@
+    .section .text.entry
+    # .globl _start
+_start:
+    la sp, boot_stack_top
+    call rcore_main
+    .section .bss.stack
+    # .globl boot_stack_lower_bound
+boot_stack_lower_bound:
+    .space 4096 * 16
+    # .globl boot_stack_top
+boot_stack_top:
diff --git a/kernel/src/lib.rs b/kernel/src/lib.rs
index d791012..784ea07 100644
--- a/kernel/src/lib.rs
+++ b/kernel/src/lib.rs
@@ -44,7 +44,8 @@ use crate::drivers::chardev::UART;
 use lazy_static::*;
 use safe_cell::UPIntrFreeCell;
 
-core::arch::global_asm!(include_str!("plantform/arch/riscv64gc/asm/entry.S"));
+// core::arch::global_asm!(include_str!("plantform/arch/riscv64gc/asm/entry.S"));
+core::arch::global_asm!(include_str!("entry.S"));
 
 fn clear_bss() {
     extern "C" {
diff --git a/kernel/src/linker.ld b/kernel/src/linker.ld
new file mode 100644
index 0000000..2fdce28
--- /dev/null
+++ b/kernel/src/linker.ld
@@ -0,0 +1,59 @@
+OUTPUT_ARCH(riscv)
+ENTRY(_start)
+BASE_ADDRESS = 0x80200000;
+
+SECTIONS
+{
+    . = BASE_ADDRESS;
+    skernel = .;
+
+    stext = .;
+    .text : {
+        *(.text.entry)
+        . = ALIGN(4K);
+        strampoline = .;
+        *(.text.trampoline);
+        . = ALIGN(4K);
+        *(.text .text.*)
+                . = ALIGN(4K);
+        _swap_frame = .;
+        *(.swap)
+        ASSERT(. - _swap_frame <= 4K, "swap frame larger than one page");
+        _etext = .;
+    }
+
+    . = ALIGN(4K);
+    etext = .;
+    srodata = .;
+    .rodata : {
+        *(.rodata .rodata.*)
+        *(.srodata .srodata.*)
+    }
+
+    . = ALIGN(4K);
+    erodata = .;
+    sdata = .;
+    .data : {
+        *(.data .data.*)
+        *(.sdata .sdata.*)
+    }
+
+    . = ALIGN(4K);
+    edata = .;
+    sbss_with_stack = .;
+    .bss : {
+        *(.bss.stack)
+        sbss = .;
+        *(.bss .bss.*)
+        *(.sbss .sbss.*)
+    }
+
+    . = ALIGN(4K);
+    ebss = .;
+    __end = .;
+    ekernel = .;
+
+    /DISCARD/ : {
+        *(.eh_frame)
+    }
+}
\ No newline at end of file
diff --git a/kernel/src/plantform/arch/riscv64gc/link/linker.ld b/kernel/src/plantform/arch/riscv64gc/link/linker.ld
index 650a258..2fdce28 100644
--- a/kernel/src/plantform/arch/riscv64gc/link/linker.ld
+++ b/kernel/src/plantform/arch/riscv64gc/link/linker.ld
@@ -15,6 +15,11 @@ SECTIONS
         *(.text.trampoline);
         . = ALIGN(4K);
         *(.text .text.*)
+                . = ALIGN(4K);
+        _swap_frame = .;
+        *(.swap)
+        ASSERT(. - _swap_frame <= 4K, "swap frame larger than one page");
+        _etext = .;
     }
 
     . = ALIGN(4K);
diff --git a/script/makefile/lib_kernel_config.mk b/script/makefile/lib_kernel_config.mk
index 34c8879..262d28c 100644
--- a/script/makefile/lib_kernel_config.mk
+++ b/script/makefile/lib_kernel_config.mk
@@ -6,5 +6,6 @@ BUILD_TARGET_ASM          := $(BUILD_TARGET)/asm
 # kernel_asm                := kernel/src/plantform/arch/riscv64gc/asm/entry.S
 # compiled_kernel_asm       := $(BUILD_TARGET_ASM)/entry.o
 
-linker_script             := kernel/src/plantform/arch/riscv64gc/link/linker.ld
+# linker_script             := kernel/src/plantform/arch/riscv64gc/link/linker.ld
+linker_script             := kernel/src/linker.ld
 BUILD_TARGET_ABI          := riscv64gc-unknown-none-elf
\ No newline at end of file
-- 
2.34.1

