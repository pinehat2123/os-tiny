From 8055f08817df11f88b831fb0506d3b7836018c47 Mon Sep 17 00:00:00 2001
From: andre <12485443-Andre_HJR@users.noreply.gitlab.com>
Date: Mon, 6 Mar 2023 03:44:55 -0500
Subject: [PATCH 34/80] add the event crate

---
 event/Cargo.toml |  10 ++
 event/src/lib.rs | 428 +++++++++++++++++++++++++++++++++++++++++++++++
 event/src/log.rs |  39 +++++
 event/src/sbi.rs |  45 +++++
 4 files changed, 522 insertions(+)
 create mode 100644 event/Cargo.toml
 create mode 100644 event/src/lib.rs
 create mode 100644 event/src/log.rs
 create mode 100644 event/src/sbi.rs

diff --git a/event/Cargo.toml b/event/Cargo.toml
new file mode 100644
index 0000000..ff0f68b
--- /dev/null
+++ b/event/Cargo.toml
@@ -0,0 +1,10 @@
+[package]
+name = "event"
+version = "0.1.0"
+edition = "2021"
+
+# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
+
+[dependencies]
+spin = "0.7.0"
+safe_cell = { path = "../safe_cell", package = "safe_cell" }
diff --git a/event/src/lib.rs b/event/src/lib.rs
new file mode 100644
index 0000000..37f457e
--- /dev/null
+++ b/event/src/lib.rs
@@ -0,0 +1,428 @@
+#![no_std]
+
+mod log;
+mod sbi;
+
+extern crate alloc;
+use alloc::boxed::Box;
+use alloc::sync::Arc;
+use core::cell::{Cell, UnsafeCell};
+use core::fmt;
+use core::future::Future;
+use core::mem::{self, ManuallyDrop};
+use core::ops::{Deref, DerefMut};
+use core::pin::Pin;
+use core::ptr::{self, NonNull};
+use core::sync::atomic::{self, AtomicPtr, AtomicUsize, Ordering};
+use core::task::{Context, Poll, Waker};
+use core::usize;
+use safe_cell::{Lock, LockGuard};
+
+struct Inner {
+    notified: AtomicUsize,
+    list: Lock<List>,
+    cache: UnsafeCell<Entry>,
+}
+
+impl Inner {
+    fn lock(&self) -> ListGuard<'_> {
+        ListGuard {
+            inner: self,
+            guard: self.list.lock(),
+        }
+    }
+
+    #[inline(always)]
+    fn cache_ptr(&self) -> NonNull<Entry> {
+        unsafe { NonNull::new_unchecked(self.cache.get()) }
+    }
+}
+
+pub struct Event {
+    inner: AtomicPtr<Inner>,
+}
+
+unsafe impl Send for Event {}
+unsafe impl Sync for Event {}
+
+impl Event {
+    #[inline]
+    pub const fn new() -> Event {
+        Event {
+            inner: AtomicPtr::new(ptr::null_mut()),
+        }
+    }
+
+    #[cold]
+    pub fn listen(&self) -> EventListener {
+        let inner = self.inner();
+        let listener = EventListener {
+            inner: unsafe { Arc::clone(&ManuallyDrop::new(Arc::from_raw(inner))) },
+            entry: Some(inner.lock().insert(inner.cache_ptr())),
+        };
+        full_fence();
+        listener
+    }
+    #[inline]
+    pub fn notify(&self, n: usize) {
+        full_fence();
+        if let Some(inner) = self.try_inner() {
+            if inner.notified.load(Ordering::Acquire) < n {
+                inner.lock().notify(n);
+            }
+        }
+    }
+
+    #[inline]
+    pub fn notify_relaxed(&self, n: usize) {
+        if let Some(inner) = self.try_inner() {
+            if inner.notified.load(Ordering::Acquire) < n {
+                inner.lock().notify(n);
+            }
+        }
+    }
+
+    #[inline]
+    pub fn notify_additional(&self, n: usize) {
+        full_fence();
+        if let Some(inner) = self.try_inner() {
+            if inner.notified.load(Ordering::Acquire) < usize::MAX {
+                inner.lock().notify_additional(n);
+            }
+        }
+    }
+
+    #[inline]
+    pub fn notify_additional_relaxed(&self, n: usize) {
+        if let Some(inner) = self.try_inner() {
+            if inner.notified.load(Ordering::Acquire) < usize::MAX {
+                inner.lock().notify_additional(n);
+            }
+        }
+    }
+
+    #[inline]
+    fn try_inner(&self) -> Option<&Inner> {
+        let inner = self.inner.load(Ordering::Acquire);
+        unsafe { inner.as_ref() }
+    }
+
+    fn inner(&self) -> &Inner {
+        let mut inner = self.inner.load(Ordering::Acquire);
+
+        if inner.is_null() {
+            let new = Arc::new(Inner {
+                notified: AtomicUsize::new(usize::MAX),
+                list: Lock::new(List {
+                    head: None,
+                    tail: None,
+                    start: None,
+                    len: 0,
+                    notified: 0,
+                    cache_used: false,
+                }),
+                cache: UnsafeCell::new(Entry {
+                    state: Cell::new(State::Created),
+                    prev: Cell::new(None),
+                    next: Cell::new(None),
+                }),
+            });
+            let new = Arc::into_raw(new) as *mut Inner;
+
+            inner = self
+                .inner
+                .compare_exchange(inner, new, Ordering::AcqRel, Ordering::Acquire)
+                .unwrap_or_else(|x| x);
+
+            if inner.is_null() {
+                inner = new;
+            } else {
+                unsafe {
+                    drop(Arc::from_raw(new));
+                }
+            }
+        }
+
+        unsafe { &*inner }
+    }
+}
+
+impl Drop for Event {
+    #[inline]
+    fn drop(&mut self) {
+        let inner: *mut Inner = *self.inner.get_mut();
+
+        if !inner.is_null() {
+            unsafe {
+                drop(Arc::from_raw(inner));
+            }
+        }
+    }
+}
+
+impl fmt::Debug for Event {
+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
+        f.pad("Event { .. }")
+    }
+}
+
+impl Default for Event {
+    fn default() -> Event {
+        Event::new()
+    }
+}
+
+pub struct EventListener {
+    inner: Arc<Inner>,
+    entry: Option<NonNull<Entry>>,
+}
+
+unsafe impl Send for EventListener {}
+unsafe impl Sync for EventListener {}
+
+impl fmt::Debug for EventListener {
+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
+        f.pad("EventListener { .. }")
+    }
+}
+
+impl Future for EventListener {
+    type Output = ();
+
+    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {
+        let mut list = self.inner.lock();
+
+        let entry = match self.entry {
+            None => unreachable!("cannot poll a completed `EventListener` future"),
+            Some(entry) => entry,
+        };
+        let state = unsafe { &entry.as_ref().state };
+
+        match state.replace(State::Notified(false)) {
+            State::Notified(_) => {
+                list.remove(entry, self.inner.cache_ptr());
+                drop(list);
+                self.entry = None;
+                return Poll::Ready(());
+            }
+            State::Created => {
+                state.set(State::Polling(cx.waker().clone()));
+            }
+            State::Polling(w) => {
+                if w.will_wake(cx.waker()) {
+                    state.set(State::Polling(w));
+                } else {
+                    state.set(State::Polling(cx.waker().clone()));
+                }
+            }
+        }
+
+        Poll::Pending
+    }
+}
+
+impl Drop for EventListener {
+    fn drop(&mut self) {
+        if let Some(entry) = self.entry.take() {
+            let mut list = self.inner.lock();
+
+            if let State::Notified(additional) = list.remove(entry, self.inner.cache_ptr()) {
+                if additional {
+                    list.notify_additional(1);
+                } else {
+                    list.notify(1);
+                }
+            }
+        }
+    }
+}
+
+struct ListGuard<'a> {
+    inner: &'a Inner,
+    guard: LockGuard<'a, List>,
+}
+
+impl Drop for ListGuard<'_> {
+    #[inline]
+    fn drop(&mut self) {
+        let list = &mut **self;
+
+        // Update the atomic `notified` counter.
+        let notified = if list.notified < list.len {
+            list.notified
+        } else {
+            usize::MAX
+        };
+        self.inner.notified.store(notified, Ordering::Release);
+    }
+}
+
+impl Deref for ListGuard<'_> {
+    type Target = List;
+
+    #[inline]
+    fn deref(&self) -> &List {
+        &*self.guard
+    }
+}
+
+impl DerefMut for ListGuard<'_> {
+    #[inline]
+    fn deref_mut(&mut self) -> &mut List {
+        &mut *self.guard
+    }
+}
+
+enum State {
+    Created,
+    Notified(bool),
+    Polling(Waker),
+}
+
+impl State {
+    #[inline]
+    fn is_notified(&self) -> bool {
+        match self {
+            State::Notified(_) => true,
+            State::Created | State::Polling(_) => false,
+        }
+    }
+}
+
+struct Entry {
+    state: Cell<State>,
+    prev: Cell<Option<NonNull<Entry>>>,
+    next: Cell<Option<NonNull<Entry>>>,
+}
+
+struct List {
+    #[allow(unused)]
+    head: Option<NonNull<Entry>>,
+    tail: Option<NonNull<Entry>>,
+    start: Option<NonNull<Entry>>,
+    len: usize,
+    notified: usize,
+    cache_used: bool,
+}
+
+impl List {
+    fn insert(&mut self, cache: NonNull<Entry>) -> NonNull<Entry> {
+        unsafe {
+            let entry = Entry {
+                state: Cell::new(State::Created),
+                prev: Cell::new(self.tail),
+                next: Cell::new(None),
+            };
+
+            let entry = if self.cache_used {
+                NonNull::new_unchecked(Box::into_raw(Box::new(entry)))
+            } else {
+                self.cache_used = true;
+                cache.as_ptr().write(entry);
+                cache
+            };
+
+            match mem::replace(&mut self.tail, Some(entry)) {
+                None => self.head = Some(entry),
+                Some(t) => t.as_ref().next.set(Some(entry)),
+            }
+
+            if self.start.is_none() {
+                self.start = self.tail;
+            }
+
+            self.len += 1;
+
+            entry
+        }
+    }
+
+    fn remove(&mut self, entry: NonNull<Entry>, cache: NonNull<Entry>) -> State {
+        unsafe {
+            let prev = entry.as_ref().prev.get();
+            let next = entry.as_ref().next.get();
+
+            match prev {
+                None => self.head = next,
+                Some(p) => p.as_ref().next.set(next),
+            }
+
+            match next {
+                None => self.tail = prev,
+                Some(n) => n.as_ref().prev.set(prev),
+            }
+
+            if self.start == Some(entry) {
+                self.start = next;
+            }
+
+            let state = if ptr::eq(entry.as_ptr(), cache.as_ptr()) {
+                self.cache_used = false;
+                entry.as_ref().state.replace(State::Created)
+            } else {
+                Box::from_raw(entry.as_ptr()).state.into_inner()
+            };
+
+            if state.is_notified() {
+                self.notified -= 1;
+            }
+            self.len -= 1;
+
+            state
+        }
+    }
+
+    #[cold]
+    fn notify(&mut self, mut n: usize) {
+        if n <= self.notified {
+            return;
+        }
+        n -= self.notified;
+        while n > 0 {
+            n -= 1;
+
+            match self.start {
+                None => break,
+                Some(e) => {
+                    let e = unsafe { e.as_ref() };
+                    self.start = e.next.get();
+
+                    match e.state.replace(State::Notified(false)) {
+                        State::Notified(_) => {}
+                        State::Created => {}
+                        State::Polling(w) => w.wake_by_ref(),
+                    }
+
+                    self.notified += 1;
+                }
+            }
+        }
+    }
+
+    #[cold]
+    fn notify_additional(&mut self, mut n: usize) {
+        while n > 0 {
+            n -= 1;
+
+            match self.start {
+                None => break,
+                Some(e) => {
+                    let e = unsafe { e.as_ref() };
+                    self.start = e.next.get();
+
+                    match e.state.replace(State::Notified(true)) {
+                        State::Notified(_) => {}
+                        State::Created => {}
+                        State::Polling(w) => w.wake_by_ref(),
+                    }
+                    self.notified += 1;
+                }
+            }
+        }
+    }
+}
+
+#[inline]
+fn full_fence() {
+    atomic::fence(Ordering::SeqCst);
+}
diff --git a/event/src/log.rs b/event/src/log.rs
new file mode 100644
index 0000000..17fe2a8
--- /dev/null
+++ b/event/src/log.rs
@@ -0,0 +1,39 @@
+use crate::sbi::*;
+use core::fmt::{self, Write};
+
+struct Stdout;
+
+// 暂时不用关中断的锁lock::Lock，考虑多个硬件线程的情况
+static STDOUT_LOCK: spin::Mutex<()> = spin::Mutex::new(());
+
+impl Write for Stdout {
+    fn write_str(&mut self, s: &str) -> fmt::Result {
+        let mut buffer = [0u8; 4];
+        STDOUT_LOCK.lock();
+        for c in s.chars() {
+            for code_point in c.encode_utf8(&mut buffer).as_bytes().iter() {
+                console_putchar(*code_point as usize);
+            }
+        }
+        Ok(())
+    }
+}
+
+#[allow(unused)]
+pub fn print(args: fmt::Arguments) {
+    Stdout.write_fmt(args).unwrap();
+}
+
+#[macro_export]
+macro_rules! print {
+    ($fmt: literal $(, $($arg: tt)+)?) => {
+        $crate::log::print(format_args!($fmt $(, $($arg)+)?));
+    }
+}
+
+#[macro_export]
+macro_rules! println {
+    ($fmt: literal $(, $($arg: tt)+)?) => {
+        $crate::log::print(format_args!(concat!($fmt, "\n") $(, $($arg)+)?));
+    }
+}
diff --git a/event/src/sbi.rs b/event/src/sbi.rs
new file mode 100644
index 0000000..22c2f6e
--- /dev/null
+++ b/event/src/sbi.rs
@@ -0,0 +1,45 @@
+#![allow(unused)]
+use core::arch::asm;
+
+#[inline(always)]
+fn sbi_call(which: usize, arg0: usize, arg1: usize, arg2: usize) -> usize {
+    let mut ret = 0usize;
+    unsafe {
+        asm! (
+            "li x16, 0",
+            "ecall",
+            inlateout("x10") arg0 => ret,
+            in("x11") arg1,
+            in("x12") arg2,
+            in("x17") which,
+        );
+    }
+    ret
+}
+
+const SBI_SET_TIMER: usize = 0;
+const SBI_CONSOLE_PUTCHAR: usize = 1;
+const SBI_CONSOLE_GETCHAR: usize = 2;
+const SBI_CLEAR_IPI: usize = 3;
+const SBI_SEND_IPI: usize = 4;
+const SBI_REMOTE_FENCE_I: usize = 5;
+const SBI_REMOTE_SFENCE_VMA: usize = 6;
+const SBI_REMOTE_SFENCE_VMA_ASID: usize = 7;
+const SBI_SHUTDOWN: usize = 8;
+
+pub fn console_putchar(c: usize) {
+    sbi_call(SBI_CONSOLE_PUTCHAR, c, 0, 0);
+}
+
+pub fn console_getchar() -> usize {
+    sbi_call(SBI_CONSOLE_GETCHAR, 0, 0, 0)
+}
+
+pub fn shutdown() -> ! {
+    sbi_call(SBI_SHUTDOWN, 0, 0, 0);
+    unreachable!()
+}
+
+pub fn set_timer(time: usize) {
+    sbi_call(SBI_SET_TIMER, time, 0, 0);
+}
-- 
2.34.1

