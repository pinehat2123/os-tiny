From a3cf69adff07ecd8eea2a3ecb265717341ce3eda Mon Sep 17 00:00:00 2001
From: andre <12485443-Andre_HJR@users.noreply.gitlab.com>
Date: Fri, 10 Mar 2023 01:34:15 -0500
Subject: [PATCH 53/80] const syscall move

---
 application/user/src/async_lib/mod.rs         |  2 +-
 application/user/src/async_lib/syscall/mod.rs | 49 ++++++++--------
 application/user/src/lib.rs                   | 10 +++-
 ring_scheduler/src/syscall.rs                 | 54 +++++++++++++-----
 syscall/src/lib.rs                            | 56 ++++++++++++++++++-
 5 files changed, 129 insertions(+), 42 deletions(-)

diff --git a/application/user/src/async_lib/mod.rs b/application/user/src/async_lib/mod.rs
index 913dbe2..cc8816b 100644
--- a/application/user/src/async_lib/mod.rs
+++ b/application/user/src/async_lib/mod.rs
@@ -58,4 +58,4 @@ use syscall::sys_yield;
 
 pub fn do_yield(next_asid: usize) -> usize {
     sys_yield(next_asid)
-}
\ No newline at end of file
+}
diff --git a/application/user/src/async_lib/syscall/mod.rs b/application/user/src/async_lib/syscall/mod.rs
index 5d08c39..6acf7f4 100644
--- a/application/user/src/async_lib/syscall/mod.rs
+++ b/application/user/src/async_lib/syscall/mod.rs
@@ -1,25 +1,28 @@
-const MODULE_PROCESS: usize = 0x114514;
-const MODULE_TEST_INTERFACE: usize = 0x233666;
-const MODULE_TASK: usize = 0x7777777;
-
-const FUNC_PROCESS_EXIT: usize = 0x1919810;
-const FUNC_PROCESS_PANIC: usize = 0x11451419;
-
-const FUNC_TEST_WRITE: usize = 0x666233;
-const FUNC_TEST_WRITE_ONE: usize = 0x444555;
-const FUNC_TEST_READ_ONE: usize = 0x999888;
-const FUNC_TEST_READ_LINE: usize = 0x11117777;
-const FUNC_TEST_RESET_TIMER: usize = 0x333;
-const FUNC_TEST_READ_TIMER: usize = 0x22;
-
-const FUNC_SWITCH_TASK: usize = 0x666666;
-const FUNC_IO_TASK: usize = 0x55555;
-
-const FUNC_CHECK: usize = 0x4444;
-
-const BLOCK_SIZE: usize = 512;
-
-use syscall_macro::{syscall1, syscall0};
+// const MODULE_PROCESS: usize = 0x114514;
+// const MODULE_TEST_INTERFACE: usize = 0x233666;
+// const MODULE_TASK: usize = 0x7777777;
+//
+// const FUNC_PROCESS_EXIT: usize = 0x1919810;
+// const FUNC_PROCESS_PANIC: usize = 0x11451419;
+//
+// const FUNC_TEST_WRITE: usize = 0x666233;
+// const FUNC_TEST_WRITE_ONE: usize = 0x444555;
+// const FUNC_TEST_READ_ONE: usize = 0x999888;
+// const FUNC_TEST_READ_LINE: usize = 0x11117777;
+// const FUNC_TEST_RESET_TIMER: usize = 0x333;
+// const FUNC_TEST_READ_TIMER: usize = 0x22;
+//
+// const FUNC_SWITCH_TASK: usize = 0x666666;
+// const FUNC_IO_TASK: usize = 0x55555;
+//
+// const FUNC_CHECK: usize = 0x4444;
+//
+// const BLOCK_SIZE: usize = 512;
+
+use syscall_macro::{
+    syscall0, syscall1,
+    syscall_number::user::{FUNC_CHECK, FUNC_SWITCH_TASK, MODULE_TASK},
+};
 
 pub fn sys_yield(next_asid: usize) -> usize {
     unsafe { syscall1(MODULE_TASK, FUNC_SWITCH_TASK, next_asid) }
@@ -27,4 +30,4 @@ pub fn sys_yield(next_asid: usize) -> usize {
 
 pub fn sys_kernel_check() -> usize {
     unsafe { syscall0(MODULE_TASK, FUNC_CHECK) }
-}
\ No newline at end of file
+}
diff --git a/application/user/src/lib.rs b/application/user/src/lib.rs
index a5d18c2..53fc46d 100644
--- a/application/user/src/lib.rs
+++ b/application/user/src/lib.rs
@@ -1,6 +1,12 @@
 #![no_std]
-#![feature(linkage,panic_info_message, alloc_error_handler, core_intrinsics, maybe_uninit_uninit_array, const_maybe_uninit_uninit_array)]
-
+#![feature(
+    linkage,
+    panic_info_message,
+    alloc_error_handler,
+    core_intrinsics,
+    maybe_uninit_uninit_array,
+    const_maybe_uninit_uninit_array
+)]
 
 #[macro_use]
 pub mod console;
diff --git a/ring_scheduler/src/syscall.rs b/ring_scheduler/src/syscall.rs
index 1a4769d..fd9e7b7 100644
--- a/ring_scheduler/src/syscall.rs
+++ b/ring_scheduler/src/syscall.rs
@@ -1,10 +1,10 @@
 //! 系统调用，用于调试
-const MODULE_TEST_INTERFACE: usize = 0x233666;
-const MODULE_PROCESS: usize = 0x114514;
-
-const FUNC_PROCESS_PANIC: usize = 0x11451419;
-
-const FUNC_TEST_WRITE: usize = 0x666233;
+// const MODULE_TEST_INTERFACE: usize = 0x233666;
+// const MODULE_PROCESS: usize = 0x114514;
+// 
+// const FUNC_PROCESS_PANIC: usize = 0x11451419;
+// 
+// const FUNC_TEST_WRITE: usize = 0x666233;
 
 // syscall macro
 // macro_rules! syscall {
@@ -12,7 +12,7 @@ const FUNC_TEST_WRITE: usize = 0x666233;
 //         $(
 //             pub unsafe fn $name($a: usize, $($b: usize, $($c: usize, $($d: usize, $($e: usize, $($f: usize, $($g: usize, $($h: usize)?)?)?)?)?)?)?) -> usize {
 //                 let _ret: usize;
-// 
+//
 //                 core::arch::asm!(
 //                     "ecall",
 //                     in("a7") $a,
@@ -40,13 +40,13 @@ const FUNC_TEST_WRITE: usize = 0x666233;
 //                     lateout("a0") _ret,
 //                     options(nostack),
 //                 );
-// 
+//
 //                 1106
 //             }
 //         )+
 //     };
 // }
-// 
+//
 // syscall! {
 //     syscall0(a,z, );
 //     syscall1(a, b, z, );
@@ -57,17 +57,33 @@ const FUNC_TEST_WRITE: usize = 0x666233;
 //     syscall6(a, b, c, d, e, f, g, z, );
 // }
 
-use syscall::{syscall3, syscall6};
+use syscall::{syscall3, syscall6,
+    syscall_number::{
+        test::{MODULE_TEST_INTERFACE, FUNC_TEST_WRITE},
+        user::{MODULE_PROCESS, FUNC_PROCESS_PANIC}
+    }
+};
 
 pub fn sys_panic(file_name: Option<&str>, line: u32, col: u32, msg: Option<&str>) -> usize {
-// pub fn sys_panic(file_name: Option<&str>, line: u32, col: u32, msg: Option<&str>) -> SyscallResult {
+    // pub fn sys_panic(file_name: Option<&str>, line: u32, col: u32, msg: Option<&str>) -> SyscallResult {
     let (f_buf, f_len) = file_name
         .map(|s| (s.as_ptr() as usize, s.len()))
         .unwrap_or((0, 0));
     let (m_buf, m_len) = msg
         .map(|s| (s.as_ptr() as usize, s.len()))
         .unwrap_or((0, 0));
-    unsafe { syscall6(MODULE_PROCESS, FUNC_PROCESS_PANIC, line as usize, col as usize, f_buf, f_len, m_buf, m_len) }
+    unsafe {
+        syscall6(
+            MODULE_PROCESS,
+            FUNC_PROCESS_PANIC,
+            line as usize,
+            col as usize,
+            f_buf,
+            f_len,
+            m_buf,
+            m_len,
+        )
+    }
     /*
     syscall_6(
         MODULE_PROCESS,
@@ -78,8 +94,16 @@ pub fn sys_panic(file_name: Option<&str>, line: u32, col: u32, msg: Option<&str>
 }
 
 pub fn sys_test_write(buf: &[u8]) -> usize {
-// pub fn sys_test_write(buf: &[u8]) -> SyscallResult {
-    unsafe { syscall3(MODULE_TEST_INTERFACE, FUNC_TEST_WRITE, 0, buf.as_ptr() as usize, buf.len()) }
+    // pub fn sys_test_write(buf: &[u8]) -> SyscallResult {
+    unsafe {
+        syscall3(
+            MODULE_TEST_INTERFACE,
+            FUNC_TEST_WRITE,
+            0,
+            buf.as_ptr() as usize,
+            buf.len(),
+        )
+    }
     /*
     syscall_3(
         MODULE_TEST_INTERFACE,
@@ -143,4 +167,4 @@ fn syscall_6(module: usize, func: usize, args: [usize; 6]) -> SyscallResult {
         }
     }
 }
-*/
\ No newline at end of file
+*/
diff --git a/syscall/src/lib.rs b/syscall/src/lib.rs
index 15e3ad8..4ff69a4 100644
--- a/syscall/src/lib.rs
+++ b/syscall/src/lib.rs
@@ -1,6 +1,60 @@
 #![no_std]
 #[allow(dead_code)]
 
+pub mod syscall_number {
+
+    pub mod user {
+        pub const MODULE_PROCESS: usize = 0x114514;
+        pub const MODULE_TASK: usize = 0x7777777;
+        pub const FUNC_PROCESS_EXIT: usize = 0x1919810;
+        pub const FUNC_PROCESS_PANIC: usize = 0x11451419;
+        pub const FUNC_SWITCH_TASK: usize = 0x666666;
+        pub const FUNC_IO_TASK: usize = 0x55555;
+        pub const FUNC_CHECK: usize = 0x4444;
+        pub const BLOCK_SIZE: usize = 512;
+    }
+
+    pub mod test {
+        pub const MODULE_TEST_INTERFACE: usize = 0x233666;
+        pub const FUNC_TEST_WRITE: usize = 0x666233;
+        pub const FUNC_TEST_WRITE_ONE: usize = 0x444555;
+        pub const FUNC_TEST_READ_ONE: usize = 0x999888;
+        pub const FUNC_TEST_READ_LINE: usize = 0x11117777;
+        pub const FUNC_TEST_RESET_TIMER: usize = 0x333;
+        pub const FUNC_TEST_READ_TIMER: usize = 0x22;
+    }
+
+    pub mod kernel {
+        pub const SYSCALL_DUP: usize = 24;
+        pub const SYSCALL_OPEN: usize = 56;
+        pub const SYSCALL_CLOSE: usize = 57;
+        pub const SYSCALL_PIPE: usize = 59;
+        pub const SYSCALL_READ: usize = 63;
+        pub const SYSCALL_WRITE: usize = 64;
+        pub const SYSCALL_EXIT: usize = 93;
+        pub const SYSCALL_SLEEP: usize = 101;
+        pub const SYSCALL_YIELD: usize = 124;
+        pub const SYSCALL_KILL: usize = 129;
+        pub const SYSCALL_GET_TIME: usize = 169;
+        pub const SYSCALL_GETPID: usize = 172;
+        pub const SYSCALL_FORK: usize = 220;
+        pub const SYSCALL_EXEC: usize = 221;
+        pub const SYSCALL_WAITPID: usize = 260;
+        pub const SYSCALL_THREAD_CREATE: usize = 1000;
+        pub const SYSCALL_GETTID: usize = 1001;
+        pub const SYSCALL_WAITTID: usize = 1002;
+        pub const SYSCALL_MUTEX_CREATE: usize = 1010;
+        pub const SYSCALL_MUTEX_LOCK: usize = 1011;
+        pub const SYSCALL_MUTEX_UNLOCK: usize = 1012;
+        pub const SYSCALL_SEMAPHORE_CREATE: usize = 1020;
+        pub const SYSCALL_SEMAPHORE_UP: usize = 1021;
+        pub const SYSCALL_SEMAPHORE_DOWN: usize = 1022;
+        pub const SYSCALL_CONDVAR_CREATE: usize = 1030;
+        pub const SYSCALL_CONDVAR_SIGNAL: usize = 1031;
+        pub const SYSCALL_CONDVAR_WAIT: usize = 1032;
+        pub const SYSCALL_CREATE_DESKTOP: usize = 2000;
+    }
+}
 
 macro_rules! syscall {
     ($($name:ident($a:ident, $($b:ident, $($c:ident, $($d:ident, $($e:ident, $($f:ident, $($g:ident, $($h:ident, )?)?)?)?)?)?)?);)+) => {
@@ -50,4 +104,4 @@ syscall! {
     syscall4(a, b, c, d, e, z, );
     syscall5(a, b, c, d, e, f, z, );
     syscall6(a, b, c, d, e, f, g, z, );
-}
\ No newline at end of file
+}
-- 
2.34.1

