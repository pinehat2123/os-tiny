From aaf1542421a79726045e3030a0b02f53047c5023 Mon Sep 17 00:00:00 2001
From: andre <12485443-Andre_HJR@users.noreply.gitlab.com>
Date: Tue, 7 Mar 2023 10:47:21 -0500
Subject: [PATCH 45/80] async_lib start in userspace.

---
 application/user/Cargo.toml                   |  10 +-
 application/user/src/async_lib/mod.rs         |  39 ++++
 application/user/src/async_lib/syscall/mod.rs |  74 ++++++++
 .../user/src/async_lib/task/channel.rs        | 132 +++++++++++++
 application/user/src/async_lib/task/mod.rs    |  66 +++++++
 application/user/src/async_lib/task/shared.rs | 174 ++++++++++++++++++
 .../user/src/async_lib/task/user_task.rs      |  70 +++++++
 application/user/src/lib.rs                   |   8 +-
 application/user/src/syscall.rs               |   2 +-
 async_tiny/async_easy_fs/src/block_cache.rs   |  57 +++---
 async_tiny/async_easy_fs/src/lib.rs           | 104 +++++------
 kernel/src/sync/mod.rs                        |  16 +-
 kernel/src/syscall/mod.rs                     |   1 -
 ring_scheduler/build.rs                       |   4 +-
 tconfig/src/lib.rs                            |   1 -
 15 files changed, 666 insertions(+), 92 deletions(-)
 create mode 100644 application/user/src/async_lib/mod.rs
 create mode 100644 application/user/src/async_lib/syscall/mod.rs
 create mode 100644 application/user/src/async_lib/task/channel.rs
 create mode 100644 application/user/src/async_lib/task/mod.rs
 create mode 100644 application/user/src/async_lib/task/shared.rs
 create mode 100644 application/user/src/async_lib/task/user_task.rs

diff --git a/application/user/Cargo.toml b/application/user/Cargo.toml
index 12378b3..24a29d3 100644
--- a/application/user/Cargo.toml
+++ b/application/user/Cargo.toml
@@ -14,6 +14,14 @@ lazy_static = { version = "1.4.0", features = ["spin_no_std"] }
 embedded-graphics = "0.7.1"
 oorandom ="11"
 virtio-input-decoder = "0.1.4"
+woke = "0.0.2"
+spin = "0.5.2"
+r0 = "1"
+event = { path = "../../event", package = "event" }
+async-mutex = { path = "../../async_tiny/async_mutex", package = "async_mutex"}
 
 [profile.release]
-debug = true
\ No newline at end of file
+debug = true
+
+[features]
+async_lib = []
\ No newline at end of file
diff --git a/application/user/src/async_lib/mod.rs b/application/user/src/async_lib/mod.rs
new file mode 100644
index 0000000..a0bad88
--- /dev/null
+++ b/application/user/src/async_lib/mod.rs
@@ -0,0 +1,39 @@
+#[allow(dead_code)]
+mod syscall;
+#[allow(dead_code)]
+mod task;
+
+static mut SHARED_PAYLOAD_BASE: usize = 0;
+static mut ADDRESS_SPACE_ID: usize = 0;
+
+use core::future::Future;
+
+pub fn execute_async_main(main: impl Future<Output = i32> + Send + Sync + 'static) -> i32 {
+    let hart_id = 0usize;
+    let shared_payload = unsafe { task::shared::SharedPayload::new(SHARED_PAYLOAD_BASE) };
+    let address_space_id = unsafe { task::shared::AddressSpaceId::from_raw(ADDRESS_SPACE_ID) };
+    static mut EXIT_CODE: i32 = 0;
+    let main_task = task::new_user(
+        async move { unsafe { EXIT_CODE = main.await } },
+        shared_payload.shared_scheduler,
+        shared_payload.shared_set_task_state,
+    );
+
+    unsafe {
+        shared_payload.add_task(hart_id, address_space_id, main_task.task_repr());
+    }
+
+    task::shared::run_until_ready(
+        || unsafe { shared_payload.peek_task(task::shared::user_should_switch) },
+        |task_reper| unsafe { shared_payload.delete_task(task_reper) },
+        |task_repr, new_state| unsafe { shared_payload.set_task_state(task_repr, new_state) },
+    );
+
+    unsafe { EXIT_CODE }
+}
+
+use syscall::sys_yield;
+
+pub fn do_yield(next_asid: usize) -> usize {
+    sys_yield(next_asid)
+}
\ No newline at end of file
diff --git a/application/user/src/async_lib/syscall/mod.rs b/application/user/src/async_lib/syscall/mod.rs
new file mode 100644
index 0000000..6ccce33
--- /dev/null
+++ b/application/user/src/async_lib/syscall/mod.rs
@@ -0,0 +1,74 @@
+const MODULE_PROCESS: usize = 0x114514;
+const MODULE_TEST_INTERFACE: usize = 0x233666;
+const MODULE_TASK: usize = 0x7777777;
+
+const FUNC_PROCESS_EXIT: usize = 0x1919810;
+const FUNC_PROCESS_PANIC: usize = 0x11451419;
+
+const FUNC_TEST_WRITE: usize = 0x666233;
+const FUNC_TEST_WRITE_ONE: usize = 0x444555;
+const FUNC_TEST_READ_ONE: usize = 0x999888;
+const FUNC_TEST_READ_LINE: usize = 0x11117777;
+const FUNC_TEST_RESET_TIMER: usize = 0x333;
+const FUNC_TEST_READ_TIMER: usize = 0x22;
+
+const FUNC_SWITCH_TASK: usize = 0x666666;
+const FUNC_IO_TASK: usize = 0x55555;
+
+const FUNC_CHECK: usize = 0x4444;
+
+const BLOCK_SIZE: usize = 512;
+
+macro_rules! syscall {
+    ($($name:ident($a:ident, $($b:ident, $($c:ident, $($d:ident, $($e:ident, $($f:ident, $($g:ident, )?)?)?)?)?)?);)+) => {
+        $(
+            pub unsafe fn $name($a: usize, $($b: usize, $($c: usize, $($d: usize, $($e: usize, $($f: usize, $($g: usize)?)?)?)?)?)?) -> usize {
+                let _ret: usize;
+
+                core::arch::asm!(
+                    "ecall",
+                    in("a7") $a,
+                    $(
+                        in("a0") $b,
+                        $(
+                            in("a1") $c,
+                            $(
+                                in("a2") $d,
+                                $(
+                                    in("a3") $e,
+                                    $(
+                                        in("a4") $f,
+                                        $(
+                                            in("a5") $g,
+                                        )?
+                                    )?
+                                )?
+                            )?
+                        )?
+                    )?
+                    lateout("a0") _ret,
+                    options(nostack),
+                );
+
+                1106
+            }
+        )+
+    };
+}
+
+syscall! {
+    syscall0(a,z, );
+    syscall1(a, b, z, );
+    syscall2(a, b, c, z, );
+    syscall3(a, b, c, d, z, );
+    syscall4(a, b, c, d, e, z, );
+    syscall5(a, b, c, d, e, f, z, );
+}
+
+pub fn sys_yield(next_asid: usize) -> usize {
+    unsafe { syscall1(MODULE_TASK, FUNC_SWITCH_TASK, next_asid) }
+}
+
+pub fn sys_kernel_check() -> usize {
+    unsafe { syscall0(MODULE_TASK, FUNC_CHECK) }
+}
\ No newline at end of file
diff --git a/application/user/src/async_lib/task/channel.rs b/application/user/src/async_lib/task/channel.rs
new file mode 100644
index 0000000..953a875
--- /dev/null
+++ b/application/user/src/async_lib/task/channel.rs
@@ -0,0 +1,132 @@
+//! 任务间通信通道(channel)实现
+//!
+//! 目前只考虑一对一的场景
+use alloc::sync::Arc;
+use async_mutex::AsyncMutex;
+use core::mem::MaybeUninit;
+use core::ptr;
+use event::Event;
+
+/// 缓冲区
+struct ChannelBuf<T, const N: usize> {
+    data: [MaybeUninit<T>; N],
+    head: usize,
+    tail: usize,
+}
+
+impl<T, const N: usize> ChannelBuf<T, N> {
+    pub const fn new() -> Self {
+        Self {
+            data: MaybeUninit::uninit_array(),
+            head: 0,
+            tail: 0,
+        }
+    }
+    pub const fn len(&self) -> usize {
+        self.tail.wrapping_sub(self.head) % N
+    }
+    #[inline]
+    pub const fn is_empty(&self) -> bool {
+        self.tail == self.head
+    }
+    #[inline]
+    fn is_full(&self) -> bool {
+        self.len() == N - 1
+    }
+    pub fn push_back(&mut self, val: T) -> Option<T> {
+        if self.is_full() {
+            return Some(val);
+        }
+        unsafe { *self.data[self.tail].as_mut_ptr() = val };
+        self.tail = self.tail.wrapping_add(1);
+        if self.tail >= N || self.tail == 0 {
+            self.tail = self.tail.wrapping_sub(N);
+        }
+        None
+    }
+    pub fn pop_front(&mut self) -> Option<T> {
+        if self.is_empty() {
+            return None;
+        }
+        let value = unsafe { ptr::read(self.data[self.head].as_ptr()) };
+        self.head = self.head.wrapping_add(1); // assured non empty
+        if self.head >= N || self.head == 0 {
+            self.head = self.head.wrapping_sub(N);
+        }
+        Some(value)
+    }
+}
+
+/// 接收者
+pub struct Receiver<T, const N: usize> {
+    buf: Arc<AsyncMutex<ChannelBuf<T, N>>>,
+    rx_event: Arc<Event>,
+    tx_event: Arc<Event>,
+}
+
+impl<T, const N: usize> Receiver<T, N> {
+    pub async fn receive(&self) -> T {
+        let rx_listener = self.rx_event.listen();
+        let should_yield;
+        {
+            let s = self.buf.lock().await;
+            should_yield = s.is_empty();
+        }
+        if should_yield {
+            // 如果缓冲区为空，这里先主动让出
+            rx_listener.await;
+        }
+        // 该任务被唤醒，在一对一的场景下缓冲区必不为空
+        let mut s = self.buf.lock().await;
+        let val = s.pop_front().unwrap();
+        // 通知写端
+        // 如果没有写端在监听，这个消息被丢失
+        self.tx_event.notify(1);
+        val
+    }
+}
+
+/// 发送者
+pub struct Sender<T, const N: usize> {
+    buf: Arc<AsyncMutex<ChannelBuf<T, N>>>,
+    rx_event: Arc<Event>,
+    tx_event: Arc<Event>,
+}
+
+impl<T, const N: usize> Sender<T, N> {
+    pub async fn send(&self, t: T) {
+        let tx_listener = self.tx_event.listen();
+        let should_yield;
+        {
+            let s = self.buf.lock().await;
+            should_yield = s.is_full();
+        }
+        if should_yield {
+            // 如果缓冲区已满，这里主动让出
+            tx_listener.await;
+        }
+        // 该任务被唤醒，在一对一的情况下缓冲区必没满
+        let mut s = self.buf.lock().await;
+        assert!(s.push_back(t).is_none());
+        // 通知读端
+        // 如果没有读端在监听，这个消失被丢失
+        self.rx_event.notify(1);
+    }
+}
+
+pub fn bounded<T, const N: usize>() -> (Sender<T, N>, Receiver<T, N>) {
+    let buf = Arc::new(AsyncMutex::new(ChannelBuf::new()));
+    let tx_event = Arc::new(Event::new());
+    let rx_event = Arc::new(Event::new());
+    let sender = Sender {
+        buf: Arc::clone(&buf),
+        rx_event: Arc::clone(&rx_event),
+        tx_event: Arc::clone(&tx_event),
+    };
+    let receiver = Receiver {
+        buf: Arc::clone(&buf),
+        rx_event: Arc::clone(&rx_event),
+        tx_event: Arc::clone(&tx_event),
+    };
+    (sender, receiver)
+}
diff --git a/application/user/src/async_lib/task/mod.rs b/application/user/src/async_lib/task/mod.rs
new file mode 100644
index 0000000..89de7d3
--- /dev/null
+++ b/application/user/src/async_lib/task/mod.rs
@@ -0,0 +1,66 @@
+use alloc::sync::Arc;
+use core::future::Future;
+use core::ptr::NonNull;
+use shared::TaskState;
+use user_task::UserTask;
+
+pub mod channel;
+pub mod shared;
+pub mod user_task;
+
+/// 共享调度器返回的结果
+#[derive(Debug)]
+pub enum TaskResult {
+    /// 应当立即执行特定任务
+    Task(usize),
+    /// 其它地址空间的任务要运行，应当让出时间片
+    ShouldYield(usize),
+    /// 调度器中没有非睡眠任务
+    NoWakeTask,
+    /// 队列已空，所有任务已经结束
+    Finished,
+}
+
+// 创建一个新的用户任务，打包它的环境
+pub fn new_user(
+    future: impl Future<Output = ()> + 'static + Send + Sync,
+    shared_scheduler: NonNull<()>,
+    set_task_state: unsafe extern "C" fn(NonNull<()>, usize, TaskState),
+) -> Arc<UserTaskRepr> {
+    Arc::new(UserTaskRepr(
+        UserTask::new(future),
+        shared_scheduler.as_ptr() as usize,
+        set_task_state,
+    ))
+}
+
+#[derive(Debug)]
+pub struct UserTaskRepr(
+    UserTask,
+    usize,
+    unsafe extern "C" fn(NonNull<()>, usize, TaskState),
+);
+
+impl UserTaskRepr {
+    /// 转换到共享的任务编号
+    ///
+    /// note(unsafe): 创建了一个没有边界的生命周期
+    pub unsafe fn task_repr(self: Arc<Self>) -> usize {
+        Arc::into_raw(self) as usize
+    }
+    pub unsafe fn do_wake(self: &Arc<Self>) {
+        let shared_scheduler = NonNull::new(self.1 as *mut ()).unwrap();
+        let task_repr = Arc::as_ptr(self) as usize;
+        (self.2)(shared_scheduler, task_repr, TaskState::Ready)
+    }
+    #[inline]
+    pub fn task(&self) -> &UserTask {
+        &self.0
+    }
+}
+
+impl woke::Woke for UserTaskRepr {
+    fn wake_by_ref(task: &Arc<Self>) {
+        unsafe { task.do_wake() }
+    }
+}
diff --git a/application/user/src/async_lib/task/shared.rs b/application/user/src/async_lib/task/shared.rs
new file mode 100644
index 0000000..89e7c6a
--- /dev/null
+++ b/application/user/src/async_lib/task/shared.rs
@@ -0,0 +1,174 @@
+use super::super::do_yield;
+use super::super::syscall::sys_kernel_check;
+use super::super::task::UserTaskRepr;
+use super::super::ADDRESS_SPACE_ID;
+//！ 尝试在用户态给共享调度器添加任务
+use super::TaskResult;
+use alloc::sync::Arc;
+use core::ptr::NonNull;
+use core::{
+    mem,
+    task::{Context, Poll},
+};
+use woke::waker_ref;
+
+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
+#[repr(C)]
+pub struct AddressSpaceId(u16);
+
+impl AddressSpaceId {
+    // todo: 可见性
+    pub unsafe fn from_raw(asid: usize) -> AddressSpaceId {
+        AddressSpaceId(asid as u16)
+    }
+}
+
+pub extern "C" fn user_should_switch(asid: AddressSpaceId) -> bool {
+    asid.0 != unsafe { ADDRESS_SPACE_ID as u16 }
+}
+
+pub fn run_until_ready(
+    peek_task: impl Fn() -> TaskResult,
+    delete_task: impl Fn(usize) -> bool,
+    set_task_state: impl Fn(usize, TaskState),
+) {
+    let mut threshold = 0;
+    loop {
+        if threshold > 50 {
+            sys_kernel_check();
+            threshold = 0;
+        }
+        let task = peek_task();
+        // println!(">>> user executor: next task = {:x?}", task);
+        match task {
+            TaskResult::Task(task_repr) => {
+                // 在相同的地址空间里面
+                let task: Arc<UserTaskRepr> = unsafe { Arc::from_raw(task_repr as *mut _) };
+                let waker = waker_ref(&task);
+                let mut context = Context::from_waker(&*waker);
+                let ret = task.task().future.lock().as_mut().poll(&mut context);
+                if let Poll::Pending = ret {
+                    set_task_state(task_repr, TaskState::Sleeping);
+                    mem::forget(task); // 不要释放task的内存，它将继续保存在内存中被使用
+                } else {
+                    delete_task(task_repr);
+                }
+            }
+            TaskResult::ShouldYield(next_asid) => {
+                // // 不释放这个任务的内存，执行切换地址空间的系统调用
+                // mem::forget(task);
+                do_yield(next_asid);
+            }
+            TaskResult::NoWakeTask => threshold += 1,
+            TaskResult::Finished => {
+                break;
+            }
+        }
+    }
+}
+
+pub fn run_until_ready_analysis(
+    peek_task: impl Fn() -> TaskResult,
+    delete_task: impl Fn(usize) -> bool,
+) {
+    loop {
+        let task = peek_task();
+        match task {
+            TaskResult::Task(task_repr) => {
+                // 性能测试使用，直接删除任务
+                let task: Arc<UserTaskRepr> = unsafe { Arc::from_raw(task_repr as *mut _) };
+                let waker = waker_ref(&task);
+                let _context = Context::from_waker(&*waker);
+                delete_task(task_repr);
+            }
+            TaskResult::ShouldYield(next_asid) => {
+                // // 不释放这个任务的内存，执行切换地址空间的系统调用
+                // mem::forget(task);
+                do_yield(next_asid);
+            }
+            TaskResult::NoWakeTask => unreachable!(),
+            TaskResult::Finished => {
+                break;
+            }
+        }
+    }
+}
+
+/// 任务当前的状态
+#[derive(Debug, Clone, PartialEq, Eq, Hash)]
+#[repr(u8)]
+pub enum TaskState {
+    Ready = 0,
+    Sleeping = 1,
+}
+
+/// 共享载荷
+#[repr(C)]
+pub struct SharedPayload {
+    pub(crate) shared_scheduler: NonNull<()>,
+    shared_add_task: unsafe extern "C" fn(NonNull<()>, usize, AddressSpaceId, usize) -> bool,
+    shared_peek_task:
+        unsafe extern "C" fn(NonNull<()>, extern "C" fn(AddressSpaceId) -> bool) -> TaskResult,
+    shared_delete_task: unsafe extern "C" fn(NonNull<()>, usize) -> bool,
+    pub(crate) shared_set_task_state: unsafe extern "C" fn(NonNull<()>, usize, TaskState),
+}
+
+type SharedPayloadAsUsize = [usize; 7]; // 编译时基地址，（已清空）初始化函数，共享调度器地址，添加函数，弹出函数
+type SharedPayloadRaw = (
+    usize, // 编译时基地址，转换后类型占位，不使用
+    usize, // 初始化函数已清空，不适用
+    NonNull<()>,
+    unsafe extern "C" fn(NonNull<()>, usize, AddressSpaceId, usize) -> bool, // 添加任务
+    unsafe extern "C" fn(NonNull<()>, extern "C" fn(AddressSpaceId) -> bool) -> TaskResult, // 弹出任务
+    unsafe extern "C" fn(NonNull<()>, usize) -> bool, // 删除任务
+    unsafe extern "C" fn(NonNull<()>, usize, TaskState), // 改变任务的状态
+);
+
+impl SharedPayload {
+    pub unsafe fn new(base: usize) -> Self {
+        let mut payload_usize = *(base as *const SharedPayloadAsUsize);
+        let compiled_offset = payload_usize[0];
+        for (i, idx) in payload_usize.iter_mut().enumerate() {
+            if i == 0 || i == 1 {
+                continue;
+            }
+            *idx = idx.wrapping_sub(compiled_offset).wrapping_add(base);
+        }
+        let raw_table: SharedPayloadRaw = mem::transmute(payload_usize);
+        Self {
+            shared_scheduler: raw_table.2,
+            shared_add_task: raw_table.3,
+            shared_peek_task: raw_table.4,
+            shared_delete_task: raw_table.5,
+            shared_set_task_state: raw_table.6,
+        }
+    }
+
+    pub unsafe fn add_task(
+        &self,
+        hart_id: usize,
+        address_space_id: AddressSpaceId,
+        task_repr: usize,
+    ) -> bool {
+        let f = self.shared_add_task;
+        f(self.shared_scheduler, hart_id, address_space_id, task_repr)
+    }
+
+    pub unsafe fn peek_task(
+        &self,
+        should_yield: extern "C" fn(AddressSpaceId) -> bool,
+    ) -> TaskResult {
+        let f = self.shared_peek_task;
+        f(self.shared_scheduler, should_yield)
+    }
+
+    pub unsafe fn delete_task(&self, task_repr: usize) -> bool {
+        let f = self.shared_delete_task;
+        f(self.shared_scheduler, task_repr)
+    }
+
+    pub unsafe fn set_task_state(&self, task_repr: usize, new_state: TaskState) {
+        let f = self.shared_set_task_state;
+        f(self.shared_scheduler, task_repr, new_state)
+    }
+}
diff --git a/application/user/src/async_lib/task/user_task.rs b/application/user/src/async_lib/task/user_task.rs
new file mode 100644
index 0000000..b4f94a3
--- /dev/null
+++ b/application/user/src/async_lib/task/user_task.rs
@@ -0,0 +1,70 @@
+use alloc::boxed::Box;
+use core::fmt;
+use core::future::Future;
+use core::pin::Pin;
+use core::sync::atomic::{AtomicUsize, Ordering};
+use spin::Mutex;
+
+/// 临时的用户态任务实现
+pub struct UserTask {
+    /// 任务的编号
+    pub id: UserTaskId,
+    /// 任务信息的可变部分
+    pub inner: Mutex<UserTaskInner>,
+    /// 任务的 future
+    pub future: Mutex<Pin<Box<dyn Future<Output = ()> + 'static + Send + Sync>>>, // 用UnsafeCell代替Mutex会好一点
+}
+
+/// 任务信息的可变部分
+#[derive(Debug)]
+pub struct UserTaskInner {
+    /// 任务是否在休眠
+    pub sleeping: bool,
+    /// 任务是否已经结束
+    pub finished: bool,
+}
+
+/// 用户任务的编号
+#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
+pub struct UserTaskId(usize);
+
+impl UserTaskId {
+    pub(crate) fn generate() -> UserTaskId {
+        // 任务编号计数器，任务编号自增
+        static COUNTER: AtomicUsize = AtomicUsize::new(0);
+        let id = COUNTER.fetch_add(1, Ordering::Relaxed);
+        if id > usize::max_value() / 2 {
+            // TODO: 不让系统 Panic
+            panic!("too many tasks!")
+        }
+        UserTaskId(id)
+    }
+}
+
+impl UserTask {
+    /// 创建一个用户态任务
+    pub fn new(future: impl Future<Output = ()> + 'static + Send + Sync) -> UserTask {
+        // 得到新的用户任务编号
+        let id = UserTaskId::generate();
+        // 打包成用户态任务
+        UserTask {
+            id,
+            inner: Mutex::new(UserTaskInner {
+                sleeping: false,
+                finished: false,
+            }),
+            future: Mutex::new(Box::pin(future)),
+        }
+    }
+}
+
+impl fmt::Debug for UserTask {
+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
+        let inner = self.inner.lock();
+        f.debug_struct("UserTask")
+            .field("task_id", &self.id)
+            .field("is sleeping", &inner.sleeping)
+            .field("is finished", &inner.finished)
+            .finish()
+    }
+}
diff --git a/application/user/src/lib.rs b/application/user/src/lib.rs
index 6f57edd..a5d18c2 100644
--- a/application/user/src/lib.rs
+++ b/application/user/src/lib.rs
@@ -1,11 +1,11 @@
 #![no_std]
-#![feature(linkage)]
-#![feature(panic_info_message)]
-#![feature(alloc_error_handler)]
-#![feature(core_intrinsics)]
+#![feature(linkage,panic_info_message, alloc_error_handler, core_intrinsics, maybe_uninit_uninit_array, const_maybe_uninit_uninit_array)]
+
 
 #[macro_use]
 pub mod console;
+#[allow(dead_code)]
+mod async_lib;
 mod lang_items;
 mod syscall;
 
diff --git a/application/user/src/syscall.rs b/application/user/src/syscall.rs
index 3f36f53..46af83c 100644
--- a/application/user/src/syscall.rs
+++ b/application/user/src/syscall.rs
@@ -156,4 +156,4 @@ pub fn sys_condvar_wait(condvar_id: usize, mutex_id: usize) -> isize {
 }
 pub fn sys_create_desktop() -> isize {
     syscall(2000, [0, 0, 0])
-}
\ No newline at end of file
+}
diff --git a/async_tiny/async_easy_fs/src/block_cache.rs b/async_tiny/async_easy_fs/src/block_cache.rs
index 48f0163..1a95acd 100644
--- a/async_tiny/async_easy_fs/src/block_cache.rs
+++ b/async_tiny/async_easy_fs/src/block_cache.rs
@@ -149,20 +149,35 @@ mod cache {
 }
 pub(crate) use cache::*;
 
-pub struct AsyncBlockCache <C: Cache<N, Key = usize, Value = [u8; B]> + Send + Sync, const B: usize, const N: usize,> {
+pub struct AsyncBlockCache<
+    C: Cache<N, Key = usize, Value = [u8; B]> + Send + Sync,
+    const B: usize,
+    const N: usize,
+> {
     block_id: usize,
     block_device: Arc<dyn AsyncBlockDevice + Send + Sync>,
     cache: AsyncMutex<C>,
     modified: bool,
 }
 
-impl AsyncBlockCache<LFUCache<usize, [u8; crate::BLOCK_SIZE], crate::CACHE_SIZE>, crate::BLOCK_SIZE, crate::CACHE_SIZE> {
+impl
+    AsyncBlockCache<
+        LFUCache<usize, [u8; crate::BLOCK_SIZE], crate::CACHE_SIZE>,
+        crate::BLOCK_SIZE,
+        crate::CACHE_SIZE,
+    >
+{
     pub fn init(block_id: usize, device: Arc<dyn AsyncBlockDevice + Send + Sync>) -> Self {
-        let mut data: [MaybeUninit<Node<usize, [u8; crate::BLOCK_SIZE]>>; crate::CACHE_SIZE] = unsafe { MaybeUninit::uninit().assume_init() };
+        let mut data: [MaybeUninit<Node<usize, [u8; crate::BLOCK_SIZE]>>; crate::CACHE_SIZE] =
+            unsafe { MaybeUninit::uninit().assume_init() };
         for elem in &mut data[..] {
             *elem = MaybeUninit::new(Node::new(0, [0; crate::BLOCK_SIZE]));
         }
-        let nodes = unsafe { core::mem::transmute::<_, [Node<usize, [u8; crate::BLOCK_SIZE]>; crate::CACHE_SIZE] > (data) };
+        let nodes = unsafe {
+            core::mem::transmute::<_, [Node<usize, [u8; crate::BLOCK_SIZE]>; crate::CACHE_SIZE]>(
+                data,
+            )
+        };
         let lfu_cache = LFUCache::empty(nodes);
         Self {
             block_id,
@@ -170,7 +185,7 @@ impl AsyncBlockCache<LFUCache<usize, [u8; crate::BLOCK_SIZE], crate::CACHE_SIZE>
             cache: AsyncMutex::new(lfu_cache),
             modified: false,
         }
-    }    
+    }
 
     /// 异步方式从块缓存中读取一个块
     pub async fn read_block(&self, block_id: usize) -> [u8; BLOCK_SIZE] {
@@ -227,7 +242,7 @@ impl AsyncBlockCache<LFUCache<usize, [u8; crate::BLOCK_SIZE], crate::CACHE_SIZE>
 //     block_device: Arc<dyn BlockDevice>,
 //     modified: bool,
 // }
-// 
+//
 // impl BlockCache {
 //     /// Load a new BlockCache from disk.
 //     pub fn new(block_id: usize, block_device: Arc<dyn BlockDevice>) -> Self {
@@ -241,11 +256,11 @@ impl AsyncBlockCache<LFUCache<usize, [u8; crate::BLOCK_SIZE], crate::CACHE_SIZE>
 //             modified: false,
 //         }
 //     }
-// 
+//
 //     fn addr_of_offset(&self, offset: usize) -> usize {
 //         &self.cache[offset] as *const _ as usize
 //     }
-// 
+//
 //     pub fn get_ref<T>(&self, offset: usize) -> &T
 //     where
 //         T: Sized,
@@ -255,7 +270,7 @@ impl AsyncBlockCache<LFUCache<usize, [u8; crate::BLOCK_SIZE], crate::CACHE_SIZE>
 //         let addr = self.addr_of_offset(offset);
 //         unsafe { &*(addr as *const T) }
 //     }
-// 
+//
 //     pub fn get_mut<T>(&mut self, offset: usize) -> &mut T
 //     where
 //         T: Sized,
@@ -266,15 +281,15 @@ impl AsyncBlockCache<LFUCache<usize, [u8; crate::BLOCK_SIZE], crate::CACHE_SIZE>
 //         let addr = self.addr_of_offset(offset);
 //         unsafe { &mut *(addr as *mut T) }
 //     }
-// 
+//
 //     pub fn read<T, V>(&self, offset: usize, f: impl FnOnce(&T) -> V) -> V {
 //         f(self.get_ref(offset))
 //     }
-// 
+//
 //     pub fn modify<T, V>(&mut self, offset: usize, f: impl FnOnce(&mut T) -> V) -> V {
 //         f(self.get_mut(offset))
 //     }
-// 
+//
 //     pub fn sync(&mut self) {
 //         if self.modified {
 //             self.modified = false;
@@ -282,26 +297,26 @@ impl AsyncBlockCache<LFUCache<usize, [u8; crate::BLOCK_SIZE], crate::CACHE_SIZE>
 //         }
 //     }
 // }
-// 
+//
 // impl Drop for BlockCache {
 //     fn drop(&mut self) {
 //         self.sync()
 //     }
 // }
-// 
+//
 // const BLOCK_CACHE_SIZE: usize = 16;
-// 
+//
 // pub struct BlockCacheManager {
 //     queue: VecDeque<(usize, Arc<Mutex<BlockCache>>)>,
 // }
-// 
+//
 // impl BlockCacheManager {
 //     pub fn new() -> Self {
 //         Self {
 //             queue: VecDeque::new(),
 //         }
 //     }
-// 
+//
 //     pub fn get_block_cache(
 //         &mut self,
 //         block_id: usize,
@@ -334,12 +349,12 @@ impl AsyncBlockCache<LFUCache<usize, [u8; crate::BLOCK_SIZE], crate::CACHE_SIZE>
 //         }
 //     }
 // }
-// 
+//
 // lazy_static! {
 //     pub static ref BLOCK_CACHE_MANAGER: Mutex<BlockCacheManager> =
 //         Mutex::new(BlockCacheManager::new());
 // }
-// 
+//
 // pub fn get_block_cache(
 //     block_id: usize,
 //     block_device: Arc<dyn BlockDevice>,
@@ -348,11 +363,11 @@ impl AsyncBlockCache<LFUCache<usize, [u8; crate::BLOCK_SIZE], crate::CACHE_SIZE>
 //         .lock()
 //         .get_block_cache(block_id, block_device)
 // }
-// 
+//
 // pub fn block_cache_sync_all() {
 //     let manager = BLOCK_CACHE_MANAGER.lock();
 //     for (_, cache) in manager.queue.iter() {
 //         cache.lock().sync();
 //     }
 // }
-// 
\ No newline at end of file
+//
diff --git a/async_tiny/async_easy_fs/src/lib.rs b/async_tiny/async_easy_fs/src/lib.rs
index 35f3abe..69d77da 100644
--- a/async_tiny/async_easy_fs/src/lib.rs
+++ b/async_tiny/async_easy_fs/src/lib.rs
@@ -1,52 +1,52 @@
-#![no_std]
-
-extern crate alloc;
-
-mod bitmap;
-mod block_cache;
-mod block_dev;
-mod efs;
-mod layout;
-mod vfs;
-
-mod config {
-    pub const BLOCK_SZ: usize = 512;
-    pub const BLOCK_SIZE: usize = 512;
-    pub const CACHE_SIZE: usize = 100;
-}
-pub use config::*;
-use bitmap::Bitmap;
-use block_cache::{block_cache_sync_all, get_block_cache};
-pub use block_dev::BlockDevice;
-pub use efs::EasyFileSystem;
-use layout::*;
-pub use vfs::Inode;
-
-#[cfg(feature = "async_async_trait")]
-mod asynchronous_async_trait {
-    use alloc::boxed::Box;
-    use async_trait::async_trait;
-    #[async_trait]
-    pub trait AsyncBlockDevice {
-        async fn read(&self, block_id: usize, buf: &mut [u8]);
-        async fn write(&self, block_id: usize, buf: &[u8]);
-    }
-}
-#[cfg(feature = "async_async_trait")]
-pub use asynchronous_async_trait::AsyncBlockDevice;
-
-#[cfg(feature = "async_generic")]
-mod asynchronous_generic {
-    pub trait AsyncBlockDevice {
-        type NextFuture<'a>: Future<Output = Option<(&'a [u8], &'a [u8])>>;
-
-        fn read(&self, block_id: usize, buf: &mut [u8]) -> Self::NextFuture<'_>;
-        fn write(&self, block_id: usize, buf: &[u8]) -> Self::NextFuture<'_>;
-    }
-}
-
-#[derive(Debug)]
-pub enum EasyError {
-    NotFound,
-    CreateFileError,
-}
+#![no_std]
+
+extern crate alloc;
+
+mod bitmap;
+mod block_cache;
+mod block_dev;
+mod efs;
+mod layout;
+mod vfs;
+
+mod config {
+    pub const BLOCK_SZ: usize = 512;
+    pub const BLOCK_SIZE: usize = 512;
+    pub const CACHE_SIZE: usize = 100;
+}
+use bitmap::Bitmap;
+use block_cache::{block_cache_sync_all, get_block_cache};
+pub use block_dev::BlockDevice;
+pub use config::*;
+pub use efs::EasyFileSystem;
+use layout::*;
+pub use vfs::Inode;
+
+#[cfg(feature = "async_async_trait")]
+mod asynchronous_async_trait {
+    use alloc::boxed::Box;
+    use async_trait::async_trait;
+    #[async_trait]
+    pub trait AsyncBlockDevice {
+        async fn read(&self, block_id: usize, buf: &mut [u8]);
+        async fn write(&self, block_id: usize, buf: &[u8]);
+    }
+}
+#[cfg(feature = "async_async_trait")]
+pub use asynchronous_async_trait::AsyncBlockDevice;
+
+#[cfg(feature = "async_generic")]
+mod asynchronous_generic {
+    pub trait AsyncBlockDevice {
+        type NextFuture<'a>: Future<Output = Option<(&'a [u8], &'a [u8])>>;
+
+        fn read(&self, block_id: usize, buf: &mut [u8]) -> Self::NextFuture<'_>;
+        fn write(&self, block_id: usize, buf: &[u8]) -> Self::NextFuture<'_>;
+    }
+}
+
+#[derive(Debug)]
+pub enum EasyError {
+    NotFound,
+    CreateFileError,
+}
diff --git a/kernel/src/sync/mod.rs b/kernel/src/sync/mod.rs
index 573b734..355da9c 100644
--- a/kernel/src/sync/mod.rs
+++ b/kernel/src/sync/mod.rs
@@ -1,8 +1,8 @@
-mod condvar;
-mod mutex;
-mod semaphore;
-
-pub use condvar::Condvar;
-pub use mutex::{Mutex, MutexBlocking, MutexSpin};
-pub use semaphore::Semaphore;
-pub use safe_cell::{UPIntrFreeCell, UPIntrRefMut};
+mod condvar;
+mod mutex;
+mod semaphore;
+
+pub use condvar::Condvar;
+pub use mutex::{Mutex, MutexBlocking, MutexSpin};
+pub use safe_cell::{UPIntrFreeCell, UPIntrRefMut};
+pub use semaphore::Semaphore;
diff --git a/kernel/src/syscall/mod.rs b/kernel/src/syscall/mod.rs
index a5ef169..7d66131 100644
--- a/kernel/src/syscall/mod.rs
+++ b/kernel/src/syscall/mod.rs
@@ -68,4 +68,3 @@ pub fn syscall(syscall_id: usize, args: [usize; 3]) -> isize {
         _ => panic!("Unsupported syscall_id: {}", syscall_id),
     }
 }
-
diff --git a/ring_scheduler/build.rs b/ring_scheduler/build.rs
index 63dbda7..d34125e 100644
--- a/ring_scheduler/build.rs
+++ b/ring_scheduler/build.rs
@@ -10,9 +10,7 @@ fn main() {
     // Put the linker script somewhere the linker can find it
     let mut linker = fs::File::create(out_dir.join("linker.ld")).unwrap();
     match platform.as_str() {
-        "qemu" => linker
-            .write_all(include_bytes!("src/linker.ld"))
-            .unwrap(),
+        "qemu" => linker.write_all(include_bytes!("src/linker.ld")).unwrap(),
         p => panic!("haven't supported platform: {}", p),
     }
     println!("cargo:rustc-link-search={}", out_dir.display());
diff --git a/tconfig/src/lib.rs b/tconfig/src/lib.rs
index 0584cf7..f4d0381 100644
--- a/tconfig/src/lib.rs
+++ b/tconfig/src/lib.rs
@@ -22,4 +22,3 @@ pub const MMIO: &[(usize, usize)] = &[
     (0xc000000, 0x210000), // VIRT_PLIC in virt machine
     (0x10000000, 0x9000),  // VIRT_UART0 with GPU  in virt machine
 ];
-
-- 
2.34.1

