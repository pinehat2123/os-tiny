From 4ed6b0ebf436fec050e4f70472c55842ffb8bb46 Mon Sep 17 00:00:00 2001
From: andre <12485443-Andre_HJR@users.noreply.gitlab.com>
Date: Fri, 10 Mar 2023 02:56:30 -0500
Subject: [PATCH 60/80] change `syscall()->usize` to `syscall()->isize`

---
 application/user/src/async_lib/mod.rs         |  2 +-
 application/user/src/async_lib/syscall/mod.rs | 24 +++++++++----------
 ring_scheduler/src/syscall.rs                 |  4 ++--
 syscall/src/lib.rs                            |  2 +-
 4 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/application/user/src/async_lib/mod.rs b/application/user/src/async_lib/mod.rs
index cc8816b..9fa2fe4 100644
--- a/application/user/src/async_lib/mod.rs
+++ b/application/user/src/async_lib/mod.rs
@@ -56,6 +56,6 @@ pub fn execute_async() {
 
 use syscall::sys_yield;
 
-pub fn do_yield(next_asid: usize) -> usize {
+pub fn do_yield(next_asid: usize) -> isize {
     sys_yield(next_asid)
 }
diff --git a/application/user/src/async_lib/syscall/mod.rs b/application/user/src/async_lib/syscall/mod.rs
index e886f58..d65cb67 100644
--- a/application/user/src/async_lib/syscall/mod.rs
+++ b/application/user/src/async_lib/syscall/mod.rs
@@ -35,11 +35,11 @@ use syscall_macro::{
 
 use config::BLOCK_SIZE;
 
-pub fn sys_exit(exit_code: i32) -> usize {
+pub fn sys_exit(exit_code: i32) -> isize {
     unsafe { syscall1(MODULE_PROCESS, FUNC_PROCESS_EXIT, exit_code as usize) }
 }
 
-pub fn sys_panic(file_name: Option<&str>, line: u32, col: u32, msg: Option<&str>) -> usize {
+pub fn sys_panic(file_name: Option<&str>, line: u32, col: u32, msg: Option<&str>) -> isize {
     let (f_buf, f_len) = file_name
         .map(|s| (s.as_ptr() as usize, s.len()))
         .unwrap_or((0, 0));
@@ -65,11 +65,11 @@ pub fn sys_panic(file_name: Option<&str>, line: u32, col: u32, msg: Option<&str>
     }
 }
 
-pub fn sys_yield(next_asid: usize) -> usize {
+pub fn sys_yield(next_asid: usize) -> isize {
     unsafe { syscall1(MODULE_TASK, FUNC_SWITCH_TASK, next_asid) }
 }
 
-pub fn sys_test_write(buf: &[u8]) -> usize {
+pub fn sys_test_write(buf: &[u8]) -> isize {
     // syscall_3(
     //     MODULE_TEST_INTERFACE,
     //     FUNC_TEST_WRITE,
@@ -86,17 +86,17 @@ pub fn sys_test_write(buf: &[u8]) -> usize {
     }
 }
 
-pub fn sys_test_write_one(data: usize) -> usize {
+pub fn sys_test_write_one(data: usize) -> isize {
     // syscall_2(MODULE_TEST_INTERFACE, FUNC_TEST_WRITE_ONE, [0, data])
     unsafe { syscall2(MODULE_TEST_INTERFACE, FUNC_TEST_WRITE_ONE, 0, data) }
 }
 
-pub fn sys_test_read_one() -> usize {
+pub fn sys_test_read_one() -> isize {
     // syscall_1(MODULE_TEST_INTERFACE, FUNC_TEST_READ_ONE, 0)
     unsafe { syscall1(MODULE_TEST_INTERFACE, FUNC_TEST_READ_ONE, 0) }
 }
 
-pub fn sys_test_read_line(buf: &mut [u8]) -> usize {
+pub fn sys_test_read_line(buf: &mut [u8]) -> isize {
     unsafe {
         syscall3(
             MODULE_TEST_INTERFACE,
@@ -108,15 +108,15 @@ pub fn sys_test_read_line(buf: &mut [u8]) -> usize {
     }
 }
 
-pub fn sys_test_rest_timer() -> usize {
+pub fn sys_test_rest_timer() -> isize {
     unsafe { syscall0(MODULE_TEST_INTERFACE, FUNC_TEST_RESET_TIMER) }
 }
 
-pub fn sys_read_timer() -> usize {
+pub fn sys_read_timer() -> isize {
     unsafe { syscall0(MODULE_TEST_INTERFACE, FUNC_TEST_READ_TIMER) }
 }
 
-pub fn sys_enroll_read(block_id: usize, buf: &mut [u8]) -> usize {
+pub fn sys_enroll_read(block_id: usize, buf: &mut [u8]) -> isize {
     assert!(BLOCK_SIZE == buf.len());
     unsafe {
         syscall3(
@@ -129,7 +129,7 @@ pub fn sys_enroll_read(block_id: usize, buf: &mut [u8]) -> usize {
     }
 }
 
-pub fn sys_error_write(block_id: usize, buf: &[u8]) -> usize {
+pub fn sys_error_write(block_id: usize, buf: &[u8]) -> isize {
     assert!(BLOCK_SIZE == buf.len());
     unsafe {
         syscall3(
@@ -142,6 +142,6 @@ pub fn sys_error_write(block_id: usize, buf: &[u8]) -> usize {
     }
 }
 
-pub fn sys_kernel_check() -> usize {
+pub fn sys_kernel_check() -> isize {
     unsafe { syscall0(MODULE_TASK, FUNC_CHECK) }
 }
diff --git a/ring_scheduler/src/syscall.rs b/ring_scheduler/src/syscall.rs
index 25dc726..7fdedeb 100644
--- a/ring_scheduler/src/syscall.rs
+++ b/ring_scheduler/src/syscall.rs
@@ -65,7 +65,7 @@ use syscall::{
     },
 };
 
-pub fn sys_panic(file_name: Option<&str>, line: u32, col: u32, msg: Option<&str>) -> usize {
+pub fn sys_panic(file_name: Option<&str>, line: u32, col: u32, msg: Option<&str>) -> isize {
     // pub fn sys_panic(file_name: Option<&str>, line: u32, col: u32, msg: Option<&str>) -> SyscallResult {
     let (f_buf, f_len) = file_name
         .map(|s| (s.as_ptr() as usize, s.len()))
@@ -94,7 +94,7 @@ pub fn sys_panic(file_name: Option<&str>, line: u32, col: u32, msg: Option<&str>
     */
 }
 
-pub fn sys_test_write(buf: &[u8]) -> usize {
+pub fn sys_test_write(buf: &[u8]) -> isize {
     // pub fn sys_test_write(buf: &[u8]) -> SyscallResult {
     unsafe {
         syscall3(
diff --git a/syscall/src/lib.rs b/syscall/src/lib.rs
index 4ff69a4..616b774 100644
--- a/syscall/src/lib.rs
+++ b/syscall/src/lib.rs
@@ -59,7 +59,7 @@ pub mod syscall_number {
 macro_rules! syscall {
     ($($name:ident($a:ident, $($b:ident, $($c:ident, $($d:ident, $($e:ident, $($f:ident, $($g:ident, $($h:ident, )?)?)?)?)?)?)?);)+) => {
         $(
-            pub unsafe fn $name($a: usize, $($b: usize, $($c: usize, $($d: usize, $($e: usize, $($f: usize, $($g: usize, $($h: usize, )?)?)?)?)?)?)?) -> usize {
+            pub unsafe fn $name($a: usize, $($b: usize, $($c: usize, $($d: usize, $($e: usize, $($f: usize, $($g: usize, $($h: usize, )?)?)?)?)?)?)?) -> isize {
                 let _ret: usize;
 
                 core::arch::asm!(
-- 
2.34.1

